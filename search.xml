<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Websokcet 实现mini聊天室</title>
      <link href="/2019/05/21/php/websocket-mini-liao-tian-shi/"/>
      <url>/2019/05/21/php/websocket-mini-liao-tian-shi/</url>
      
        <content type="html"><![CDATA[<p>前端经常需要与服务器进行持续的通讯以保持双方信息的同步，long long ago 我们会使用长轮询的方式来实现比如:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/getData"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每隔10秒向服务器同步一次数据，这种方式缺点很明显:</p><ol><li>每次请求都需要新建HTTP连接</li><li>只能是客户端向服务器的单向请求，服务器无法主动请求。</li><li>无法即时更新，就算将时间间隔调整为1秒，同时有1万个客户端打开，服务器也受不了。</li></ol><p>那有没有一种像打电话一样，接通了之后双方有事就可以直接通知的呢，websocket就很好的满足了这个需求。</p><h2 id="websokcet"><a href="#websokcet" class="headerlink" title="websokcet"></a>websokcet</h2><blockquote><p>WebSocket 是基于 TCP 的独立的协议。它与 HTTP 唯一的关系是它的握手是由 HTTP 服务器解释为一个 Upgrade 请求</p></blockquote><blockquote><p>WebSocket 的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。其他特点包括：</p></blockquote><ul><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443 ，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</li><li>推荐这篇文章  <a href="https://segmentfault.com/a/1190000012948613#articleHeader1" target="_blank" rel="noopener">WebSocket 详解</a></li></ul><h3 id="websokcet-客户端"><a href="#websokcet-客户端" class="headerlink" title="websokcet 客户端"></a>websokcet 客户端</h3><ul><li>Chrome/Firefox/高版本IE/Safari等浏览器内置了JS语言的WebSocket客户端</li><li>微信小程序开发框架内置的WebSocket客户端</li><li>异步的PHP程序中可以使用Swoole\Http\Client作为WebSocket客户端</li><li>apache/php-fpm或其他同步阻塞的PHP程序中可以使用swoole/framework提供的<a href="https://github.com/swoole/framework/blob/master/libs/Swoole/Client/WebSocket.php" target="_blank" rel="noopener">同步WebSocket客户端</a></li><li>非WebSocket客户端不能与WebSocket服务器通信</li></ul><h4 id="简易的js-websokcet-客户端"><a href="#简易的js-websokcet-客户端" class="headerlink" title="简易的js websokcet 客户端"></a>简易的js websokcet 客户端</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>        if<span class="token punctuation">(</span>window.WebSocket<span class="token punctuation">)</span><span class="token punctuation">{</span>            var webSocket <span class="token operator">=</span> new WebSocket<span class="token punctuation">(</span><span class="token string">"ws://10.201.10.242:5200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webSocket.onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                //webSocket.send<span class="token punctuation">(</span><span class="token string">"Hello,WebSocket!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            webSocket.onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                var content <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                if<span class="token punctuation">(</span>event.data instanceof Blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    var img <span class="token operator">=</span> document.createElement<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    img.src <span class="token operator">=</span> window.URL.createObjectURL<span class="token punctuation">(</span>event.data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    content.appendChild<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>else <span class="token punctuation">{</span>                    content.innerHTML <span class="token operator">=</span> content.innerHTML.concat<span class="token punctuation">(</span><span class="token string">'&lt;p style="margin-left:20px;height:20px;line-height:20px;">'</span>+event.data+<span class="token string">'&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            var sendMessage <span class="token operator">=</span> function<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                var data <span class="token operator">=</span> document.getElementById<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>.value<span class="token punctuation">;</span>                webSocket.send<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                document.getElementById<span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>.value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            console.log<span class="token punctuation">(</span><span class="token string">"您的浏览器不支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"width:600px;margin:0 auto;border:1px solid #ccc;"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"content"</span> style<span class="token operator">=</span><span class="token string">"overflow-y:auto;height:300px;"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>hr/<span class="token operator">></span>    <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"height:40px"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"message"</span> style<span class="token operator">=</span><span class="token string">"margin-left:10px;height:25px;width:450px;"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"sendMessage()"</span> style<span class="token operator">=</span><span class="token string">"height:28px;width:75px;"</span><span class="token operator">></span>发送<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><h3 id="websokcet-服务端"><a href="#websokcet-服务端" class="headerlink" title="websokcet 服务端"></a>websokcet 服务端</h3><ul><li>使用 swoole的<code>swoole_websocket_server</code>  来搭建websokcet的服务端</li><li>使用 swoole的内存表<code>swoole_table</code> 来存储数据，线上项目还是建议使用redis</li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$config</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$server</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param array $config 配置文件 ['host'=>'' , 'port'=>'']     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内存表 实现进程间共享数据，也可以使用redis替代</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实例化配置</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token variable">$config</span>；    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swoole<span class="token punctuation">\</span>WebSocket<span class="token punctuation">\</span>Server</span><span class="token punctuation">(</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span>Swoole\<span class="token package">WebSocket<span class="token punctuation">\</span>Server</span> <span class="token variable">$server</span><span class="token punctuation">,</span> Swoole\<span class="token package">Http<span class="token punctuation">\</span>Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">'fd'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fd</span><span class="token punctuation">,</span>            <span class="token string">'name'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'S'</span><span class="token punctuation">.</span> <span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fd</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里就随便写了,做登陆设计会有身份</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 放入内存表</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fd</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fd</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span>                <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'all'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">allUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'openSuccess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">allUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$users</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$users</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$users</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span>Swoole\<span class="token package">WebSocket<span class="token punctuation">\</span>Server</span> <span class="token variable">$server</span><span class="token punctuation">,</span> Swoole\<span class="token package">WebSocket<span class="token punctuation">\</span>Frame</span> <span class="token variable">$frame</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token variable">$frame</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">,</span> <span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token variable">$frame</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">fd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 推送消息     *     * @param \swoole_websocket_server $server     * @param string $message     * @param string $type     * @param int $fd     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">pushMessage</span><span class="token punctuation">(</span>Swoole\<span class="token package">WebSocket<span class="token punctuation">\</span>Server</span> <span class="token variable">$server</span><span class="token punctuation">,</span> string <span class="token variable">$message</span><span class="token punctuation">,</span> string <span class="token variable">$type</span><span class="token punctuation">,</span> int <span class="token variable">$fd</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$datetime</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$fd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 自己不用发送 也可以发 看前端怎么设计</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string">'fd'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$fd</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$server</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string">'fd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">'type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$type</span><span class="token punctuation">,</span>                <span class="token string">'message'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$message</span><span class="token punctuation">,</span>                <span class="token string">'datetime'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$datetime</span><span class="token punctuation">,</span>                <span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$user</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 客户端关闭的时候     *     * @param \swoole_websocket_server $server     * @param int $fd     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span>Swoole\<span class="token package">WebSocket<span class="token punctuation">\</span>Server</span> <span class="token variable">$server</span><span class="token punctuation">,</span> int <span class="token variable">$fd</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$fd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pushMessage</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">,</span> <span class="token string">"{$user['name']}离开聊天室"</span><span class="token punctuation">,</span> <span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token variable">$fd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">del</span><span class="token punctuation">(</span><span class="token variable">$fd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建内存表     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">createTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swoole<span class="token punctuation">\</span>Table</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">'fd'</span><span class="token punctuation">,</span> Swoole\<span class="token package">Table</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">column</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> Swoole\<span class="token package">Table</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">TYPE_STRING</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="mini聊天室-实战"><a href="#mini聊天室-实战" class="headerlink" title="mini聊天室 实战"></a>mini聊天室 实战</h2><blockquote><ul><li>照着<a href="https://github.com/shisiying/webim" target="_blank" rel="noopener">webim</a>搭建的一个聊天项目<a href="https://github.com/yujiarong/chat" target="_blank" rel="noopener">chat</a>,涉及swoole,websocket,laravels等知识点 </li><li><a href="http://chat.dwyjr.cn/chat" target="_blank" rel="noopener">聊天室入口</a>  </li><li><a href="http://chat.dwyjr.cn/chat/room/index" target="_blank" rel="noopener">后台入口</a></li></ul></blockquote><h3 id="主要知识点"><a href="#主要知识点" class="headerlink" title="主要知识点"></a>主要知识点</h3><ul><li>使用Laravel 快速搭建后台管理系统，这里使用的是之前集成的一个项目 <a href="https://github.com/yujiarong/niftyAdmin" target="_blank" rel="noopener">niftyAdmin</a>，Laravel5.5。</li><li>集成<a href="https://github.com/hhxsv5/laravel-s" target="_blank" rel="noopener">Laravels</a>插件来使用Swoole的功能。</li><li>通过Nginx反向代理Swoole来加速HTTP服务，提高并发。</li><li>通过Swoole将Laravel常驻内存需要解决的一些注意事项。</li><li>在Laravel中使用多表登陆，前后台用户分开登陆管理，直接使用的Laravels的<code>guards</code>来处理。</li><li>通过Swoole来搭建高性能的Websocket的服务。</li><li>使用Swoole的异步Task功能来Push Websokcet 的Message。</li><li>使用Swoole的Tabel的直接管理一些不重要的数据。</li></ul><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul><li>可以在聊天室群聊，也可以私聊。</li><li>通过laravels使用swoole搭建websocket 服务。</li><li>使用Task 异步发送websocket message 提高性能。</li><li>使用swoole_table 存储数据，如果是生产环境建议还是改成redis。</li></ul><h3 id="主要改动"><a href="#主要改动" class="headerlink" title="主要改动"></a>主要改动</h3><ul><li>新增一个聊天室后台，设置了onRequest回调，WebSocket\Server同时作为http服务器。</li><li>后台可以管理聊天室，主要是新增和查看聊天房间 <a href="http://chat.dwyjr.cn/chat/room/index" target="_blank" rel="noopener">链接</a>。</li><li>支持多表登陆,聊天用户管理,后台用户管理分开。</li><li>新增自动登录注册，也就是说页面会记住当前登录用户，不需要每次刷新抖登录。</li><li>新增小爱同学智能聊天，<code>@小爱</code>  聊天 ，他就会回复你哦，这个机器人很笨。</li></ul><h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><ol><li>git clone <a href="https://github.com/yujiarong/chat" target="_blank" rel="noopener">https://github.com/yujiarong/chat</a></li><li>composer install</li><li>php artisan key:generate  composer里面应该集成了脚本</li><li>php artisan migrate 数据表迁移</li><li>php artisan laravels publish  发布laravels的配置文件</li><li><p>修改配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>.env<span class="token variable">`</span></span> 里面的 <span class="token variable"><span class="token variable">`</span>JS_DOMIND<span class="token variable">`</span></span> 图片域名  ，<span class="token variable"><span class="token variable">`</span>WS_SERVER<span class="token variable">`</span></span> JSd的websokcet连接地址<span class="token variable"><span class="token variable">`</span>.env<span class="token variable">`</span></span> 里面的 <span class="token variable"><span class="token variable">`</span>LARAVELS_LISTEN_IP<span class="token variable">`</span></span>和<span class="token variable"><span class="token variable">`</span>LARAVELS_LISTEN_PORT<span class="token variable">`</span></span>用于swoole的启动监听地址</code></pre></li><li><p>nginx  使用以下的配置,后台域名HTTP访问直接代理到laravels,websocket直接使用ip+port访问。</p></li></ol><pre class=" language-bash"><code class="language-bash">upstream laravels <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 通过 IP:Port 连接</span>    server 127.0.0.1:9090  weight<span class="token operator">=</span>5 max_fails<span class="token operator">=</span>3 fail_timeout<span class="token operator">=</span>30s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 通过 UnixSocket Stream 连接，小诀窍：将socket文件放在/dev/shm目录下，可获得更好的性能</span>    <span class="token comment" spellcheck="true">#server unix:/xxxpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;</span>    <span class="token comment" spellcheck="true">#server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;</span>    <span class="token comment" spellcheck="true">#server 192.168.1.2:5200 backup;</span>    keepalive 16<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>        listen       80<span class="token punctuation">;</span>        server_name  chat.dwyjr.cn<span class="token punctuation">;</span>        root        /data/web/chat/public/<span class="token punctuation">;</span>        error_log   /data/web/chat/storage/logs/error.log   error<span class="token punctuation">;</span>        access_log  /data/web/chat/storage/logs/access.log  main<span class="token punctuation">;</span>        index index.php<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>             try_files <span class="token variable">$uri</span> @laravels<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     location @laravels <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true"># proxy_connect_timeout 60s;//看情况设置</span>        <span class="token comment" spellcheck="true"># proxy_send_timeout 60s;</span>        <span class="token comment" spellcheck="true"># proxy_read_timeout 120s;</span>        proxy_http_version 1.1<span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">""</span><span class="token punctuation">;</span>        proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Real-PORT <span class="token variable">$remote_port</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>        proxy_set_header Scheme <span class="token variable">$scheme</span><span class="token punctuation">;</span>        proxy_set_header Server-Protocol <span class="token variable">$server_protocol</span><span class="token punctuation">;</span>        proxy_set_header Server-Name <span class="token variable">$server_name</span><span class="token punctuation">;</span>        proxy_set_header Server-Addr <span class="token variable">$server_addr</span><span class="token punctuation">;</span>        proxy_set_header Server-Port <span class="token variable">$server_port</span><span class="token punctuation">;</span>        proxy_pass http://laravels<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>使用 ./bin/laravels start 就可以开始了,后台挂起加 -d,这里通过<a href="https://github.com/hhxsv5/laravel-s/blob/master/Settings-CN.md" target="_blank" rel="noopener">Laravels</a>来使用swoole</p><pre class=" language-bash"><code class="language-bash"> _                               _  _____ <span class="token operator">|</span> <span class="token operator">|</span>                             <span class="token operator">|</span> <span class="token operator">|</span>/ ____<span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">|</span>     __ _ _ __ __ ___   _____<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>___  <span class="token operator">|</span> <span class="token operator">|</span>    / _<span class="token variable"><span class="token variable">`</span> <span class="token operator">|</span> '__/ _<span class="token variable">`</span></span> \ \ / / _ \ <span class="token operator">|</span>\___ \ <span class="token operator">|</span> <span class="token operator">|</span>___<span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span>\ V /  __/ <span class="token operator">|</span>____<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">|</span>______\__,_<span class="token operator">|</span>_<span class="token operator">|</span>  \__,_<span class="token operator">|</span> \_/ \___<span class="token operator">|</span>_<span class="token operator">|</span>_____/ Speed up your Laravel/Lumen<span class="token operator">>></span><span class="token operator">></span> Components+---------------------------+---------+<span class="token operator">|</span> Component                 <span class="token operator">|</span> Version <span class="token operator">|</span>+---------------------------+---------+<span class="token operator">|</span> PHP                       <span class="token operator">|</span> 7.1.10  <span class="token operator">|</span><span class="token operator">|</span> Swoole                    <span class="token operator">|</span> 4.2.1   <span class="token operator">|</span><span class="token operator">|</span> LaravelS                  <span class="token operator">|</span> 3.5.2   <span class="token operator">|</span><span class="token operator">|</span> Laravel Framework <span class="token punctuation">[</span>local<span class="token punctuation">]</span> <span class="token operator">|</span> 5.5.45  <span class="token operator">|</span>+---------------------------+---------+<span class="token operator">>></span><span class="token operator">></span> Protocols+----------------+--------+-------------------------------+--------------+<span class="token operator">|</span> Protocol       <span class="token operator">|</span> Status <span class="token operator">|</span> Handler                       <span class="token operator">|</span> Listen At    <span class="token operator">|</span>+----------------+--------+-------------------------------+--------------+<span class="token operator">|</span> Main HTTP      <span class="token operator">|</span> On     <span class="token operator">|</span> Laravel Framework             <span class="token operator">|</span> 0.0.0.0:9090 <span class="token operator">|</span><span class="token operator">|</span> Main WebSocket <span class="token operator">|</span> On     <span class="token operator">|</span> App\Services\WebSocketService <span class="token operator">|</span> 0.0.0.0:9090 <span class="token operator">|</span>+----------------+--------+-------------------------------+--------------+</code></pre><h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><blockquote><p>基于swoole，将HTTP服务和Websocket服务整合在一起，使用laravels插件，swoole是常驻内存的,所以单例对象的使用是非常要注意的，Laravel内有很多功能使用单例模式。</p></blockquote><ol><li>Laravel的Controller里的构造方法如果初始化了一些参数，初始化后每次请求都是一样的，除非worker重启，这里如果遇到问题则每次请求后需要手动重置Controller。</li><li>某些服务提供者在加入了swoole之后因为会出现问题在，需要每次请求后重置，可以加在<code>config/laravels.php</code>的<code>register_providers</code>数组中。</li><li>如果使用到了Session一定要把<code>config/laravels.php</code>的<code>cleaners</code>中<code>SessionCleaner</code>和<code>AuthCleaner</code>开启，原因和上面一样。</li><li>若按照上面这样设置了之后还是有问题，则自己手动使用中间件清理或者重新绑定服务，比如以下方式。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpnamespace App\Http\Middleware<span class="token punctuation">;</span>use Closure<span class="token punctuation">;</span>use Route<span class="token punctuation">;</span>use Log<span class="token punctuation">;</span>class SwooleCleaner<span class="token punctuation">{</span>    /**     * 使用swoole时 清理一些常驻内存有问题的实例      * 因控制器是单例，会常驻于内存，控制器中使用了静态变量,或者在构造函数__construct<span class="token punctuation">(</span><span class="token punctuation">)</span> 初始化了一些东西，就需要重置这个控制器     * @param  \Illuminate\Http\Request  <span class="token variable">$request</span>     * @param  \Closure  <span class="token variable">$next</span>     * @return mixed     */    public <span class="token variable">$resetProvider</span> <span class="token operator">=</span> <span class="token punctuation">[</span>       <span class="token string">'datatables.request'</span> <span class="token operator">=</span><span class="token operator">></span> \Yajra\DataTables\Utilities\Request::class, //如果不清理，这个插件搜索的时候就会出问题。    <span class="token punctuation">]</span><span class="token punctuation">;</span>    public <span class="token keyword">function</span> handle<span class="token punctuation">(</span><span class="token variable">$request</span>, Closure <span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>PHP_SAPI <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">'cli'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token variable">$this</span>-<span class="token operator">></span>resetProvider<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$response</span>  <span class="token operator">=</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>isset<span class="token punctuation">(</span>Route::current<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>controller <span class="token punctuation">))</span><span class="token punctuation">{</span>                unset<span class="token punctuation">(</span> Route::current<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>controller <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Log::info<span class="token punctuation">(</span> <span class="token string">"Swoole 请求之后删除controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$response</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /*    * 重新绑定一些服务提供者,有些服务提供者有 boot<span class="token punctuation">(</span><span class="token punctuation">)</span>有初始化可能需要更多的操作    */    public <span class="token keyword">function</span> resetProvider<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        foreach <span class="token punctuation">(</span><span class="token variable">$this</span>-<span class="token operator">></span>resetProvider as <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            if<span class="token punctuation">(</span>app<span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">))</span><span class="token punctuation">{</span>                Log::info<span class="token punctuation">(</span><span class="token string">"Swoole 重置 {<span class="token variable">$key</span>}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                app<span class="token punctuation">(</span><span class="token punctuation">)</span>-<span class="token operator">></span>singleton<span class="token punctuation">(</span><span class="token variable">$key</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>use<span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> new <span class="token variable">$provider</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websokcet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Swoole提升Laravel的性能</title>
      <link href="/2019/05/14/php/laravel-optimize/"/>
      <url>/2019/05/14/php/laravel-optimize/</url>
      
        <content type="html"><![CDATA[<h3 id="优化-Laravel-网站打开速度"><a href="#优化-Laravel-网站打开速度" class="headerlink" title="优化 Laravel 网站打开速度"></a>优化 Laravel 网站打开速度</h3><ol><li>关闭 debug<br>打开.env 文件，把 debug 设置为 false. <code>barryvdh/laravel-debugbar</code>等开发环境使用的包一定要放在require-dev,线上就不要载入了，就算载入也要关闭。</li><li>缓存路由和配置<br>php artisan route:cache。如果路由中有闭包是会报错的,所以路由中就不要添加处理逻辑<br>php artisan config:cache</li><li>composer 优化<br>composer dump-autoload –optimize</li><li>Laravel 优化命令<br>php artisan optimize</li><li>使用 Laravel 缓存<pre class=" language-php"><code class="language-php"><span class="token variable">$lists</span> <span class="token operator">=</span> Cache<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">remember</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">destination</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>使用 PHP7 并开启 OPcache<br>开启opcache后需要重启 php-fpm哦</p></li><li><p>nginx 开启 gzip 压缩<br>Nginx 开启 gzip 可以有效减少服务器带宽的消耗，缺点是会增大 CPU 的占用率，但是很多时候 CPU 往往是空闲最多的。<br>在nginx的配置中添加如下:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">gzip</span> on<span class="token punctuation">;</span>gzip_min_length 1k<span class="token punctuation">;</span>gzip_buffers 16 64k<span class="token punctuation">;</span>gzip_http_version 1.1<span class="token punctuation">;</span>gzip_comp_level 9<span class="token punctuation">;</span>gzip_types text/plain application/x-javascript application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml<span class="token punctuation">;</span>gzip_vary on<span class="token punctuation">;</span>   </code></pre></li></ol><p><code>GZIP_MIN_LENGTH</code>  设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。 即: gzip_min_length 1024 </p><p>响应头中 Content-Encoding 字段是 gzip，表示该网页是经过 gzip 压缩的。</p><h3 id="使用swoole来laravel优化项目"><a href="#使用swoole来laravel优化项目" class="headerlink" title="使用swoole来laravel优化项目"></a>使用swoole来laravel优化项目</h3><p>我们这里使用<a href="https://github.com/hhxsv5/laravel-s" target="_blank" rel="noopener">laravels</a>来优化laravel5.5</p><ol><li>composer require “hhxsv5/laravel-s:~3.5.0” -vvv</li><li>配置ningx的代理到swoole端口。Nginx的配置,使用的是proxy_pass+upstream。</li><li>由于swoole是常驻内存，所以单例的写法和HTTP请求参数获取需要注意，下面会说。</li><li>如果某些包在加入swoole后出现了异常，可以用一个中间件来重置单例对象的状态。</li></ol><pre class=" language-bash"><code class="language-bash">upstream laravels <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 通过 IP:Port 连接</span>    server 127.0.0.1:5200 weight<span class="token operator">=</span>5 max_fails<span class="token operator">=</span>3 fail_timeout<span class="token operator">=</span>30s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 通过 UnixSocket Stream 连接，小诀窍：将socket文件放在/dev/shm目录下，可获得更好的性能</span>    <span class="token comment" spellcheck="true">#server unix:/xxxpath/laravel-s-test/storage/laravels.sock weight=5 max_fails=3 fail_timeout=30s;</span>    <span class="token comment" spellcheck="true">#server 192.168.1.1:5200 weight=3 max_fails=3 fail_timeout=30s;</span>    <span class="token comment" spellcheck="true">#server 192.168.1.2:5200 backup;</span>    keepalive 16<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>        listen       80<span class="token punctuation">;</span>        server_name  laravels.valsun.cn<span class="token punctuation">;</span>        root        /data/web/niftyAdmin/public/<span class="token punctuation">;</span>        error_log   /data/web/niftyAdmin/storage/logs/error.log   error<span class="token punctuation">;</span>        access_log  /data/web/niftyAdmin/storage/logs/access.log  main<span class="token punctuation">;</span>        index index.php<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>             try_files <span class="token variable">$uri</span> @laravels<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location @laravels <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># proxy_connect_timeout 60s;</span>            <span class="token comment" spellcheck="true"># proxy_send_timeout 60s;</span>            <span class="token comment" spellcheck="true"># proxy_read_timeout 120s;</span>            proxy_http_version 1.1<span class="token punctuation">;</span>            proxy_set_header Connection <span class="token string">""</span><span class="token punctuation">;</span>            proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>            proxy_set_header X-Real-PORT <span class="token variable">$remote_port</span><span class="token punctuation">;</span>            proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>            proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>            proxy_set_header Scheme <span class="token variable">$scheme</span><span class="token punctuation">;</span>            proxy_set_header Server-Protocol <span class="token variable">$server_protocol</span><span class="token punctuation">;</span>            proxy_set_header Server-Name <span class="token variable">$server_name</span><span class="token punctuation">;</span>            proxy_set_header Server-Addr <span class="token variable">$server_addr</span><span class="token punctuation">;</span>            proxy_set_header Server-Port <span class="token variable">$server_port</span><span class="token punctuation">;</span>            proxy_pass http://laravels<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h3><p>PHP 7.0.11 + Laravel5.5<br>服务器配置，就一个小型测试项目在跑，装有一个mysql服务。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">top</span> - 11:30:03 up 396 days, 10:08,  2 users,  load average: 0.14, 5.14, 7.21Tasks: 315 total,   1 running, 297 sleeping,  16 stopped,   1 zombieCpu0  <span class="token keyword">:</span> 16.3%us,  4.3%sy,  0.0%ni, 75.4%id,  2.0%wa,  0.0%hi,  1.3%si,  0.7%stCpu1  <span class="token keyword">:</span>  1.7%us,  1.7%sy,  0.0%ni, 96.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.3%stCpu2  <span class="token keyword">:</span>  1.0%us,  2.0%sy,  0.0%ni, 96.7%id,  0.3%wa,  0.0%hi,  0.0%si,  0.0%stCpu3  <span class="token keyword">:</span>  1.3%us,  1.3%sy,  0.0%ni, 97.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stCpu4  <span class="token keyword">:</span>  1.3%us,  1.3%sy,  0.0%ni, 97.4%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stCpu5  <span class="token keyword">:</span>  9.3%us,  2.7%sy,  0.0%ni, 88.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stCpu6  <span class="token keyword">:</span>  1.0%us,  3.0%sy,  0.0%ni, 96.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stCpu7  <span class="token keyword">:</span>  0.7%us,  2.3%sy,  0.0%ni, 97.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%stMem:  16333892k total, 15396272k used,   937620k free,   191568k buffersSwap:        0k total,        0k used,        0k free, 10030768k cached<span class="token punctuation">[</span>root@tracknumber_share niftyAdmin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -m</span>             total       used       <span class="token function">free</span>     shared    buffers     cachedMem:         15951      15036        914          0        187       9797-/+ buffers/cache:       5051      10899Swap:            0          0          0</code></pre><p>测试都是在本地使用简单的ab测试，目的只是想横向对比 <code>php-fpm + nginx</code>  和 <code>swoole + nginx</code> 的性能</p><p><code>./ab -n 5000 -c 500  http://nt.valsun.cn/api/getData</code></p><p>逻辑很简单,启用laravel5.5的框架通过api路由直接输出,laravel已经使用上面的优化措施</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'3123123'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="nginx-php-fpm-测试结果"><a href="#nginx-php-fpm-测试结果" class="headerlink" title="nginx + php-fpm 测试结果"></a>nginx + php-fpm 测试结果</h4><p>压测时服务器的指标</p><pre class=" language-bash"><code class="language-bash"><span class="token function">top</span> - 11:41:58 up 396 days, 10:20,  2 users,  load average: 17.20, 12.25, 11.45</code></pre><p>ab压测结果</p><pre class=" language-bash"><code class="language-bash">Server Software:        BWSServer Hostname:        nt.valsun.cnServer Port:            80Document Path:          /api/getDataDocument Length:        1436 bytesConcurrency Level:      1000Time taken <span class="token keyword">for</span> tests:   10.291 secondsComplete requests:      5000Failed requests:        954   <span class="token punctuation">(</span>Connect: 0, Receive: 0, Length: 954, Exceptions: 0<span class="token punctuation">)</span>Non-2xx responses:      5000Total transferred:      7339154 bytesHTML transferred:       5967972 bytesRequests per second:    485.84 <span class="token punctuation">[</span><span class="token comment" spellcheck="true">#/sec] (mean)</span>Time per request:       2058.296 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>Time per request:       2.058 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>Transfer rate:          696.42 <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> receivedConnection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   maxConnect:        0    2  42.5      1    3004Processing:   112 1783 1146.6   1527    3988Waiting:        8 1579 1098.9   1368    3978Total:        113 1785 1146.8   1528    3989Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>  50%   1528  66%   1751  75%   2064  80%   2434  90%   3946  95%   3969  98%   3977  99%   3978 100%   3989 <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span></code></pre><h4 id="nginx-swoole-压测"><a href="#nginx-swoole-压测" class="headerlink" title="nginx + swoole 压测"></a>nginx + swoole 压测</h4><p>压测时服务器的指标</p><pre class=" language-bash"><code class="language-bash"><span class="token function">top</span> - 11:43:03 up 399 days, 10:21,  4 users,  load average: 5.31, 2.59, 2.12</code></pre><pre class=" language-bash"><code class="language-bash">./ab  -k -t 30 -c 1000    http://laravels.valsun.cn/api/getDataBenchmarking laravels.valsun.cn <span class="token punctuation">(</span>be patient<span class="token punctuation">)</span>Completed 5000 requestsCompleted 10000 requestsCompleted 15000 requestsCompleted 20000 requestsCompleted 25000 requestsCompleted 30000 requestsCompleted 35000 requestsCompleted 40000 requestsCompleted 45000 requestsCompleted 50000 requestsFinished 50000 requestsServer Software:        BWSServer Hostname:        laravels.valsun.cnServer Port:            80Document Path:          /api/getDataDocument Length:        38 bytesConcurrency Level:      1000Time taken <span class="token keyword">for</span> tests:   14.921 secondsComplete requests:      50000Failed requests:        1772   <span class="token punctuation">(</span>Connect: 0, Receive: 0, Length: 1772, Exceptions: 0<span class="token punctuation">)</span>Non-2xx responses:      1772Keep-Alive requests:    48228Total transferred:      13281128 bytesHTML transferred:       2158712 bytesRequests per second:    3351.01 <span class="token punctuation">[</span><span class="token comment" spellcheck="true">#/sec] (mean)</span>Time per request:       298.417 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean<span class="token punctuation">)</span>Time per request:       0.298 <span class="token punctuation">[</span>ms<span class="token punctuation">]</span> <span class="token punctuation">(</span>mean, across all concurrent requests<span class="token punctuation">)</span>Transfer rate:          869.24 <span class="token punctuation">[</span>Kbytes/sec<span class="token punctuation">]</span> receivedConnection Times <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>              min  mean<span class="token punctuation">[</span>+/-sd<span class="token punctuation">]</span> median   maxConnect:        0    0   0.3      0      11Processing:     4  284 163.2    248    1243Waiting:        4  274 142.4    247    1134Total:          4  284 163.3    248    1243Percentage of the requests served within a certain <span class="token function">time</span> <span class="token punctuation">(</span>ms<span class="token punctuation">)</span>  50%    248  66%    288  75%    323  80%    348  90%    449  95%    612  98%    875  99%    976 100%   1243 <span class="token punctuation">(</span>longest request<span class="token punctuation">)</span></code></pre><p>这个采用2种ab测试方法主要是 php-fpm 用-t测试并发太高 request fail的比率就太高了，就是用柔和的方式测试。</p><p>从测试结果也看出来了swoole提升的性能很大，而且服务器的负载完全没有起来。</p><p>但是用swoole常驻内存需要注意下一些事项。</p><h3 id="swoole常驻内存注意事项"><a href="#swoole常驻内存注意事项" class="headerlink" title="swoole常驻内存注意事项"></a>swoole常驻内存注意事项</h3><p><a href="https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" target="_blank" rel="noopener">laravels的注意事项</a></p><ol><li>应通过Illuminate\Http\Request对象来获取请求信息 $_ENV是可读取的，$_SERVER是部分可读的，不能使用$_GET、$_POST、$_FILES、$_COOKIE、$_REQUEST、$_SESSION、$GLOBALS</li><li>推荐通过返回Illuminate\Http\Response对象来响应请求，兼容echo、vardump()、print_r()，不能使用函数像 dd()、exit()、die()、header()、setcookie()、http_response_code()</li><li>各种单例的连接将被常驻内存，建议开启持久连接</li><li>你声明的全局、静态变量必须手动清理或重置</li><li>无限追加元素到静态或全局变量中，将导致内存爆满</li><li>是用swoole优化之后 尽量不适用static 声明静态变量,也没有那个必要,这里有简单的方法去偷懒,就是把laravels.php配置文件中的 max_request降低一点这样它重启的频率就会大一点，以免单进程的内存暴了</li><li>单例问题 ,laravel框架到处都用了单例。</li></ol><ul><li>传统FPM下，单例模式的对象的生命周期仅在每次请求中，请求开始=&gt;实例化单例=&gt;请求结束后=&gt;单例对象资源回收。</li><li>Swoole Server下，所有单例对象会常驻于内存，这个时候单例对象的生命周期与FPM不同，请求开始=&gt;实例化单例=&gt;请求结束=&gt;单例对象依旧保留，需要开发者自己维护单例的状态</li><li>详见laravels文档,作者提供了详细的解决方案主要就是 Session,Passport,JWT的使用</li><li>如果要使用laravels，强烈建议先把这个laravels结构熟读于心，并且了解初始larvel的功能,毕竟常驻内存和平常的php-fpm编程还是有很大的不同</li></ul><ol start="8"><li>引入laravels 不仅仅是提高了并发，而且可以方便的使用swoole的功能，比如websocket,协程，多进程等</li><li>由于larvels是常驻内存，所以每次修改代码之后要看见效果就需要重启./bin/laravels reload，这个作者也提供了解决方案哦 <a href="https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md#%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81%E5%90%8E%E8%87%AA%E5%8A%A8reload" target="_blank" rel="noopener">自动reload</a></li><li>laravels 初步在小型项目使用 ，用户认证包括(session 和jwt) ,Eloquent ORM,路由，Artisan 命令行 ，Blade模板渲染都没有问题。</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 协程</title>
      <link href="/2019/04/29/swoole/coroutine/"/>
      <url>/2019/04/29/swoole/coroutine/</url>
      
        <content type="html"><![CDATA[<h2 id="Swoole-协程"><a href="#Swoole-协程" class="headerlink" title="Swoole 协程"></a>Swoole 协程</h2><p>协程可以理解为纯用户态的线程，其通过协作而不是抢占来进行切换。相对于进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低。协程主要用于优化IO操作频繁的任务,当然这个IO需要使用异步IO，能够yeild的异步IO。</p><h3 id="yield-实现协程多任务调度"><a href="#yield-实现协程多任务调度" class="headerlink" title="yield 实现协程多任务调度"></a>yield 实现协程多任务调度</h3><p>这里有两篇分享很好讲诉了使用yeild来实现生成器，从而实现协程多任务调度，<a href="https://learnku.com/articles/14482/php-multitask-co-process" target="_blank" rel="noopener">PHP 多任务协程处理</a>，<a href="https://newt0n.github.io/2017/02/10/PHP-%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/" target="_blank" rel="noopener">PHP 协程实现</a>，借花献佛哈哈。主要分以下两步。<br>这个和Python的asyncio协程实现很像。asyncio.event_loop:程序开启一个无限循环，把一些函数注册到事件循环上，当满足事件发生的时候，调用相应的协程函数。asyncio.task:一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含了任务的各种状态。</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>Task 是普通生成器的装饰器。我们将生成器赋值给它的成员变量以供后续使用，然后实现一个简单的 run() 和 finished() 方法。run() 方法用于执行任务，finished() 方法用于让调度程序知道何时终止运行。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$run</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Generator <span class="token variable">$generator</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">generator</span> <span class="token operator">=</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">run</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断是否是第一次run,第一次用next那直接会跑到第二个yield</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">generator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">generator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">run</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">generator</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h4><p>Scheduler 用于维护一个待执行的任务队列。run() 会弹出队列中的所有任务并执行它，直到运行完整个队列任务。如果某个任务没有执行完毕，当这个任务本次运行完成后，我们将再次入列。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Scheduler</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$queue</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//FIFO 队列</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>Task <span class="token variable">$task</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$task</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$task</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">queue</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$scheduler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$task1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token string">"task1: "</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//挂起IO操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$task2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token string">"task2: "</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//挂起IO操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$startTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token string">"用时: "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$startTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><p>交替执行,task1执行到yeild交出控制权，轮到task2执行到yeild再交出控制权，再一次轮到task1，直到task1执行完，队列里只剩下task2自我陶醉了。<br>虽然执行结果是这样的，但是效果并不是我们想要的,执行了9秒那和我们同步执行有什么区别，因为sleep()是同步阻塞的，接下来我们把sleep换一下。</p><pre class=" language-php"><code class="language-php">task1<span class="token punctuation">:</span> <span class="token number">0</span>task1<span class="token punctuation">:</span> <span class="token number">1</span>task2<span class="token punctuation">:</span> <span class="token number">0</span>task2<span class="token punctuation">:</span> <span class="token number">1</span>task1<span class="token punctuation">:</span> <span class="token number">2</span>task2<span class="token punctuation">:</span> <span class="token number">2</span>task2<span class="token punctuation">:</span> <span class="token number">3</span>task2<span class="token punctuation">:</span> <span class="token number">4</span>task2<span class="token punctuation">:</span> <span class="token number">5</span>用时<span class="token punctuation">:</span> <span class="token number">9.0115599632263</span></code></pre><h4 id="异步sleep"><a href="#异步sleep" class="headerlink" title="异步sleep"></a>异步sleep</h4><p>需要用到swoole,co::sleep()是swoole自带的异步sleep,go()是 <a href="https://wiki.swoole.com/wiki/page/p-coroutine.html" target="_blank" rel="noopener">swoole协程</a> 的创建命令</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">async_sleep</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>                co<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模拟请求接口、读写文件等I/O</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token variable">$scheduler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$task1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token string">"task1: "</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token function">async_sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$task2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">print</span> <span class="token string">"task2: "</span> <span class="token punctuation">.</span> <span class="token variable">$i</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">yield</span> <span class="token function">async_sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token variable">$task2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$startTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$scheduler</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span> <span class="token string">"用时: "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$startTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行结果，这应该就我们想要的IO操作异步并发,一共9个IO实际时间=1个IO,如果这个异步IO是异步mysql，异步http等就大大提升了我们脚本的并发能力</p><pre class=" language-php"><code class="language-php">task1<span class="token punctuation">:</span> <span class="token number">0</span>task2<span class="token punctuation">:</span> <span class="token number">0</span>task1<span class="token punctuation">:</span> <span class="token number">1</span>task2<span class="token punctuation">:</span> <span class="token number">1</span>task1<span class="token punctuation">:</span> <span class="token number">2</span>task2<span class="token punctuation">:</span> <span class="token number">2</span>task2<span class="token punctuation">:</span> <span class="token number">3</span>task2<span class="token punctuation">:</span> <span class="token number">4</span>task2<span class="token punctuation">:</span> <span class="token number">5</span>用时<span class="token punctuation">:</span> <span class="token number">1.0025930404663</span></code></pre><h3 id="Swoole-协程-1"><a href="#Swoole-协程-1" class="headerlink" title="Swoole 协程"></a>Swoole 协程</h3><p>从4.0版本开始Swoole提供了完整的协程(Coroutine)+通道(Channel)特性。应用层可使用完全同步的编程方式，底层自动实现异步IO。这句话是<a href="https://wiki.swoole.com/wiki/page/p-coroutine.html" target="_blank" rel="noopener">swoole</a>说的。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// swoole 创建协程</span>    <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        co<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 模拟异步请求接口、读写文件等I/O</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">swoole_event_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//异步阻塞等所有协程完成任务</span><span class="token keyword">print</span> <span class="token string">"协程用时: "</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$time</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行时间是1秒这里就不多说了。协程之所以快是因异步IO可以yield，但是我们平常使用的mysql请求，http请求等都是同步的,就算使用协程调度也提升不了并发，这不swooleg提供了我们想要的东东。</p><h4 id="Swoole-协程MySQL客户端"><a href="#Swoole-协程MySQL客户端" class="headerlink" title="Swoole 协程MySQL客户端"></a>Swoole 协程MySQL客户端</h4><p>swoole的<a href="https://wiki.swoole.com/wiki/page/p-coroutine_mysql.html" target="_blank" rel="noopener">Coroutine\MySQL</a>具体操作可以看这里,代码中举了异步和同步的mysql请求和并发试一下， dump需要引入symfony,方便打印对象的结构。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//异步mysql</span><span class="token keyword">function</span> <span class="token function">asyncMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Swoole<span class="token punctuation">\</span>Coroutine<span class="token punctuation">\</span>Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$server</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>            <span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'123456'</span><span class="token punctuation">,</span>            <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'test'</span><span class="token punctuation">,</span>            <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//异步</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// dump( $result);</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同步msql</span><span class="token keyword">function</span> <span class="token function">synMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$servername</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token variable">$conn</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token variable">$servername</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$conn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"连接失败: "</span> <span class="token punctuation">.</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from users limit 1"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// dump($row);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"0 结果"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$startTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">asyncMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">swoole_event_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$endTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$endTime</span><span class="token operator">-</span><span class="token variable">$startTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>异步所花时间<span class="token number">0.029722929000854</span><span class="token number">0.017247200012207</span><span class="token number">0.029895067214966</span><span class="token number">0.024247884750366</span>同步所花时间<span class="token number">0.086297988891602</span><span class="token number">0.083254814147949</span><span class="token number">0.0831139087677</span><span class="token number">0.083254814147949</span></code></pre><p>看运行时间不太对哈,这个怎么差了这么一点。我想的是这样的哈，Coroutine\MySQL 上面的例子异步IO操作应该是 connect 和 query，其他的例如创建客户端那就是同步操作了，这个消耗是同步阻塞的,而且占了比例不小,所以才出现这样的情况。<br>那想一下我们是不是可以这样写，把mysql异步客服端直接拿出来让协程共享。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">asyncMysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Swoole<span class="token punctuation">\</span>Coroutine<span class="token punctuation">\</span>Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$server</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>            <span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'4QqRbtNCc3LnHko4LQ9H'</span><span class="token punctuation">,</span>            <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'tracknumer_share'</span><span class="token punctuation">,</span>            <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$server</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token variable">$startTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swoole_event_wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$endTime</span> <span class="token operator">=</span> <span class="token function">microtime</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$endTime</span><span class="token operator">-</span><span class="token variable">$startTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">30</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">:</span><span class="token number">36</span> @<span class="token number">4769.0</span><span class="token punctuation">]</span>    <span class="token constant">ERROR</span>    <span class="token function">check_bind</span> <span class="token punctuation">(</span><span class="token constant">ERROR</span> <span class="token number">10002</span><span class="token punctuation">)</span><span class="token punctuation">:</span> mysql client has already been bound to another coroutine<span class="token shell-comment comment">#2, reading or writing of the same socket in multiple coroutines at the same time is not allowed.</span>Stack trace<span class="token punctuation">:</span><span class="token shell-comment comment">#0  Swoole\Coroutine\MySQL->query() called at [/data/web/dev/swoole-demo/src/Coroutine/mysql.php:44]</span></code></pre><p>哦天哪发生了什么，报错了，它说这个mysql客户端已经有其他协程占用了。是我太天真的了。官网说swoole这样做是为了防止多个协程同一时刻使用同一个客户端导致数据错乱。<br>那我们就简单实现一个mysql的连接池,复用协程客户端，实现长连接。</p><h4 id="Swoole-协程MySQL连接池"><a href="#Swoole-协程MySQL连接池" class="headerlink" title="Swoole 协程MySQL连接池"></a>Swoole 协程MySQL连接池</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/../bootstrap.php'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MysqlPool</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$available</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$pool</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//mysql服务的配置文件</span>    <span class="token keyword">protected</span> <span class="token variable">$max_connection</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接池大小 </span>    <span class="token keyword">protected</span> <span class="token variable">$current_connection</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前链接池数</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span> <span class="token operator">=</span> <span class="token variable">$config</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span>   <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplQueue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$mysql</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$mysql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @return bool|mixed|\Swoole\Coroutine\Mysql     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有空闲连接且连接池处于可用状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">available</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">length</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//无空闲连接，创建新连接</span>        <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newMysqlClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$mysql</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$mysql</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">newMysqlClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current_connection</span> <span class="token operator">>=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">max_connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"链接池已经满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">current_connection</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swoole<span class="token punctuation">\</span>Coroutine<span class="token punctuation">\</span>Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token variable">$mysql</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 连接池销毁, 置不可用状态, 防止新的客户端进入常驻连接池, 导致服务器无法平滑退出</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">available</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$config</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>            <span class="token string">'user'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'root'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'123456'</span><span class="token punctuation">,</span>            <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'test'</span><span class="token punctuation">,</span>            <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'3306'</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlPool</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好了，一个简单的连接池已经搞好了,我先用一下</p><pre class=" language-php"><code class="language-php"><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlPool</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$mysql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>好了结果出来了，新增一个defer()，在协程推出之前释放连接池的资源。</p><pre class=" language-php"><code class="language-php"><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlPool</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">defer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//用于资源的释放, 会在协程关闭之前(即协程函数执行完毕时)进行调用, 就算抛出了异常, 已注册的defer也会被执行.</span>        <span class="token keyword">echo</span> <span class="token string">"Closing connection pool\n"</span><span class="token punctuation">;</span>        <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$mysql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个有一个比较完善的 <a href="https://github.com/open-smf/connection-pool" target="_blank" rel="noopener">协程客户端链接池包</a></p><h4 id="Swoole-协程-Channel-实现并发数据收集"><a href="#Swoole-协程-Channel-实现并发数据收集" class="headerlink" title="Swoole 协程 Channel 实现并发数据收集"></a>Swoole 协程 Channel 实现并发数据收集</h4><p>这里使用子协程+通道来并发收集数据，理想的情况是使用连接池,但是会遇到问题。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//每个子进程创建一个mysql连接</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">,</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$chan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">,</span><span class="token variable">$chan</span><span class="token punctuation">,</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Swoole<span class="token punctuation">\</span>Coroutine<span class="token punctuation">\</span>Mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$chan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$chan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个pop()如果遇到空会yield,直到子协程的push()数据之后才会重新唤醒</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用连接池</span><span class="token variable">$pool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlPool</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">,</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$chan</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">chan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">go</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$pool</span><span class="token punctuation">,</span><span class="token variable">$chan</span><span class="token punctuation">,</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$mysql</span> <span class="token operator">=</span> <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysql</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'select * from users limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$chan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">push</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pool</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">put</span><span class="token punctuation">(</span><span class="token variable">$mysql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里如果不put回去，脚本就不会阻塞，不知道为啥，希望有大佬解惑！不put回去就要mysql->close()，等于每次都新建连接</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$chan</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个pop()如果遇到空会yield,直到子协程的push()数据之后才会重新唤醒</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>过了一圈swoole协程感觉还是没有Python的asyncio包好用，有些地方总是搞不明白。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用反射机制实现基本的依赖注入</title>
      <link href="/2019/04/11/fan-she/"/>
      <url>/2019/04/11/fan-she/</url>
      
        <content type="html"><![CDATA[<p>ReflectionClass实现了 Reflector 接口，使得我们可以使用该类查看另一个类的相关信息。所谓的反射，大概的意思就是将一个类的相关信息给反射 (映射、反映) 出来，<a href="https://learnku.com/articles/24200" target="_blank" rel="noopener">转载</a>。</p><h3 id="无依赖的情况"><a href="#无依赖的情况" class="headerlink" title="无依赖的情况"></a>无依赖的情况</h3><p>要实例化一个类，获得其类名即可，实际项目中还需要结合自动加载，这里为了方便说明情况，就将所有类写在同一个文件中。这个操作很简单。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Models</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Framework</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化 ReflectionClass 对象</span>        <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不能被实例化的逻辑</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取构造器</span>        <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果没有构造器，直接实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里用了变量来动态的实例化类</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$className</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$car</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'Models\Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$car</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出 object(Models\Car)#4 (0) { }</span></code></pre><h3 id="带有多层依赖的情况"><a href="#带有多层依赖的情况" class="headerlink" title="带有多层依赖的情况"></a>带有多层依赖的情况</h3><p>假设有一个汽车依赖底盘，底盘依赖轮胎和轴承，轮胎也依赖轴承，轴承无依赖。那么当需要实例化一个汽车类时，不友好的方式是这样的，$car = new Car(new Chassis(new Tyre(new Axle), new Axle())) ，打脑阔。</p><p>利用依赖注入是这样的。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Framework</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义一个类，用于实现依赖注入</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//实例化 ReflectionClass 对象</span>        <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//不能被实例化的逻辑，抽象类和接口不能被实例化</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取构造器</span>        <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果没有构造器，也就是没有依赖，直接实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$className</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果有构造器，先把构造器中的参数获取出来</span>        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$constructor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//再遍历 parameters ，找出每一个类的依赖，存到 dependencies 数组中</span>        <span class="token variable">$dependencies</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 这里是递归的去寻找每一个类的依赖，例如第一次执行的时候，程序发现汽车 Car 类依赖底盘 Chassis             * 类，此时 $parameter 是一个ReflectionParameter 的实例，接着调用 ReflectionParameter             * 的 getClass() 方法，获得一个 ReflectionClass 的实例，再接着调用 ReflectionClass             * 的 getName() 方法，取得类名，也就是 Models\Chassis ，但此时此刻还不能直接去 new             * Models\Chassis ，因为 Models\Chassis 也有依赖，故要递归的去调用 getInstance             * 进一步去寻找该类的依赖，周而复始，直到触发上面的 if(!$constructor) ，停止递归。             */</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//最后，使用 ReflectionClass 类提供的 newInstanceArgs ，方法去实例化类，参数将会传入构造器中</span>        <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$dependencies</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Models</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//汽车依赖底盘</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Chassis <span class="token variable">$chassis</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">chassis</span> <span class="token operator">=</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Chassis</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$tyre</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//底盘依赖轮胎和轴承</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Tyre <span class="token variable">$tyre</span><span class="token punctuation">,</span> Axle <span class="token variable">$axle</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tyre</span> <span class="token operator">=</span> <span class="token variable">$tyre</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">axle</span> <span class="token operator">=</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Tyre</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//轮胎也依赖轴承</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Axle <span class="token variable">$axle</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">axle</span> <span class="token operator">=</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Axle</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//轴承无依赖</span><span class="token punctuation">}</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$car</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'Models\Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$car</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="处理构造方法中的-普通参数"><a href="#处理构造方法中的-普通参数" class="headerlink" title="处理构造方法中的 普通参数"></a>处理构造方法中的 普通参数</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//汽车依赖底盘</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Chassis <span class="token variable">$chassis</span><span class="token punctuation">,</span> <span class="token variable">$width</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;-----多加入了一个参数且不限定类型</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">chassis</span> <span class="token operator">=</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">width</span> <span class="token operator">=</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行代码，报错 call to function getName() on null ，问题出在了 return $this-&gt;getInstance($parameter-&gt;getClass()-&gt;getName()) 这一行，原因是 $parameter-&gt;getClass() 的结果是 null，这也是必然的。查看手册发现这样的一段描述，ReflectionParameter::getClass — Get the type hinted class (获取所提示的类)，上面加入的 $width ，没有做类型提示，$parameter-&gt;getClass() 得到的结果必然是 null 。</p><p>故，将有类型提示的和没有类型提示的分开处理。需要这样处理</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">Framework</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$constructor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token variable">$className</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$constructor</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$dependencies</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//处理没有类型提示的参数</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">processNoHinted</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//处理有类型提示的参数</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">processHinted</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$dependencies</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">processNoHinted</span><span class="token punctuation">(</span>\<span class="token package">ReflectionParameter</span> <span class="token variable">$parameter</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isDefaultValueAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//参数为空则抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"不能为空"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">processHinted</span><span class="token punctuation">(</span>\<span class="token package">ReflectionParameter</span> <span class="token variable">$parameter</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token variable">$parameter</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">Models</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Chassis <span class="token variable">$chassis</span><span class="token punctuation">,</span> <span class="token variable">$width</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">chassis</span> <span class="token operator">=</span> <span class="token variable">$chassis</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">width</span> <span class="token operator">=</span> <span class="token variable">$width</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Chassis</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$tyre</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Tyre <span class="token variable">$tyre</span><span class="token punctuation">,</span> Axle <span class="token variable">$axle</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">tyre</span> <span class="token operator">=</span> <span class="token variable">$tyre</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">axle</span> <span class="token operator">=</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Tyre</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>Axle <span class="token variable">$axle</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">axle</span> <span class="token operator">=</span> <span class="token variable">$axle</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Axle</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$app</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$car</span> <span class="token operator">=</span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">'Models\Car'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$car</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 守护进程</title>
      <link href="/2019/02/18/php/daemon/"/>
      <url>/2019/02/18/php/daemon/</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-守护进程"><a href="#PHP-守护进程" class="headerlink" title="PHP 守护进程"></a>PHP 守护进程</h2><p>守护进程是一种运行在后台的特殊进程，因为它不属于任何一个终端，所以不会收到任何终端发来的任何信号。它与前台进程显著的区别是：</p><ul><li>它没有控制终端，不能直接和用户交互，在后台运行；</li><li>它不受用户登录和注销的影响，只受开机或关机的影响，可以长期运行；</li><li>通常我们编写的程序，都需要在 后台不终止的长期运行 ，此时就可以使用守护进程。当然，我们可以在代码中调用系统函数，或者直接在启动命令后追加&amp;操作符，如下：<pre class=" language-php"><code class="language-php">$ nohup php server<span class="token punctuation">.</span>php start <span class="token operator">&amp;</span></code></pre>通常&amp;与 nohup 结合使用，忽略 SIGHUP 信号来实现一个守护进程。该方式对业务代码侵入最小，方便且成本低，常用于临时执行任务脚本的场景。</li></ul><h3 id="守护进程要点"><a href="#守护进程要点" class="headerlink" title="守护进程要点"></a>守护进程要点</h3><ol><li>进程守护化 使用 pcntl_fork()创建子进程，终止父进程,使得程序在 shell 终端里造成一个已经运行完毕的假象,一般会fork2次。</li></ol><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"process fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//父进程直接退出</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将当前进程提升为会话leader</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"process setsid fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//改变工作目录</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//重设文件创建的掩码</span>    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 再次fork以避免SVR4这种系统终端再一次获取到进程控制</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">===</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"process fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>在子进程中创建新的会话<br>会话是一个或多个进程组的集合，一个会话有对应的控制终端。<br>setsid 函数用于创建一个新的会话，并担任该会话组的组长。调用 setsid 的三个作用：让进程摆脱原会话的控制、让进程摆脱原进程组的控制和让进程摆脱原控制终端的控制。<br>在调用 fork 函数时，子进程全盘拷贝父进程的会话期 (session，是一个或多个进程组的集合)、进程组、控制终端等，虽然父进程退出了，但原先的会话期、进程组、控制终端等并没有改变，因此，那还不是真正意义上使两者独立开来。setsid 函数能够使进程完全独立出来，从而脱离所有其他进程的控制。</p></li><li><p>改变工作目录<br>使用 fork 创建的子进程也继承了父进程的当前工作目录。由于在进程运行过程中，当前目录所在的文件系统不能卸载，因此，把当前工作目录换成其他的路径，如 “/” 或 “/tmp” 等。改变工作目录的常见函数是 chdir。</p></li><li><p>重设文件创建掩码<br>文件创建掩码是指屏蔽掉文件创建时的对应位。由于使用 fork 函数新建的子进程继承了父进程的文件创建掩码，这就给该子进程使用文件带来了诸多的麻烦。因此，把文件创建掩码设置为 0，可以大大增强该守护进程的灵活性。设置文件创建掩码的函数是 umask，通常的使用方法为 umask (0)。</p></li><li><p>重定向标准输入输出<br>用 fork 新建的子进程会从父进程那里继承一些已经打开了的文件。这些被打开的文件可能永远不会被守护进程读或写，但它们一样消耗系统资源，可能导致所在的文件系统无法卸载。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">resetStdFd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">global</span> <span class="token variable">$STDIN</span><span class="token punctuation">,</span> <span class="token variable">$STDERR</span><span class="token punctuation">,</span> <span class="token variable">$STDOUT</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重定向标准输出和错误输出</span> @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">STDIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">STDERR</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$STDIN</span>  <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'/dev/null'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$STDOUT</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$stdoutFile</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$STDERR</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$stdoutFile</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果你关闭了标准输出，标准错误输出文件描述符，那么你打开的前三个文件描述符将成为新的标准输入、输出、错误的描述符。<br>使用$STDIN, $STDOUT纯粹是障眼法而已, 必须指定为全局变量，否则文件描述符将在函数执行完毕之后被释放。</p></li><li><p>信号处理<br>在 Linux 系统中，可使用kill -l命令查看这 62 个信号值,使用信号来实现进程间通信并控制进程的行为，注册信号处理器如下：</p></li></ol><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">installSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGINT</span><span class="token punctuation">,</span>  <span class="token string">'signalHandler'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGTERM</span><span class="token punctuation">,</span> <span class="token string">'signalHandler'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGUSR1</span><span class="token punctuation">,</span> <span class="token string">'signalHandler'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGQUIT</span><span class="token punctuation">,</span> <span class="token string">'signalHandler'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 忽略信号</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGUSR2</span><span class="token punctuation">,</span> <span class="token constant">SIG_IGN</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGHUP</span><span class="token punctuation">,</span>  <span class="token constant">SIG_IGN</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">signalHandler</span><span class="token punctuation">(</span><span class="token variable">$signal</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$signal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token constant">SIGINT</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token constant">SIGTERM</span><span class="token punctuation">:</span>            <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">SIGQUIT</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token constant">SIGUSR1</span><span class="token punctuation">:</span>            <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中，SIGINT 和 SIGTERM 信号会触发stop操作，即终止所有进程；SIGQUIT 和 SIGUSR1 信号会触发reload操作，即重新加载所有 Worker 进程；此处忽略了 SIGUSR2 和 SIGHUP 信号，但是并未忽略 SIGKILL 信号，即所有进程都可以被强制kill掉。</p><h3 id="Show-My-Code"><a href="#Show-My-Code" class="headerlink" title="Show My Code"></a>Show My Code</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Daemon</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$daemonize</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否进程守护化 </span>    <span class="token keyword">protected</span> <span class="token variable">$stdoutFile</span> <span class="token operator">=</span> <span class="token string">'/dev/daemon.log'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重定向标准输出文件 设置之后可以查看守护进程的错误</span>    <span class="token keyword">protected</span> <span class="token variable">$pidFile</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//子进程pid文件</span>    <span class="token keyword">const</span> <span class="token constant">PIDPATH</span> <span class="token operator">=</span> <span class="token string">'/var/run/'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认的进程pid保存路径</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setPidFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建守护进程核心函数     * @return string|void     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">daemonize</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">checkPcntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建子进程</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"process fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//终止父进程</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//在子进程中创建新的会话</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not detach'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 再次fork以避免SVR4这种系统终端再一次获取到进程控制</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"process fork fail\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!==</span> <span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变工作目录</span>        <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重设文件创建的掩码</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">saveMasterPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存pid</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setProcessTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置进程名字</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetStdFd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭文件描述符</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 守护进程的任务，子类重写job，执行自定义方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 你的守护经常需要执行的任务</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// echo 'job process'.PHP_EOL;</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'/var/job.log'</span><span class="token punctuation">,</span> <span class="token string">'do job'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置 进程pid保存文件 之类可以重新自定义pidFile路径     * @return void     */</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setPidFile</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PIDPATH</span><span class="token punctuation">.</span><span class="token function">get_called_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'_server.pid'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//get_called_class 继承之后获取的是之类的名字,或者使用后期静态绑定</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 保存pid以实现stop     */</span>    <span class="token keyword">protected</span>  <span class="token keyword">function</span> <span class="token function">saveMasterPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Can't create pid file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把当前进程的id写入到文件中</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取守护进程的id     * @return int     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断存放守护进程id的文件是否存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">posix_kill</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token constant">SIG_DFL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断该进程是否正常运行中</span>            <span class="token keyword">return</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关闭标准输出和错误输出.     */</span>    <span class="token keyword">protected</span>  <span class="token keyword">function</span> <span class="token function">resetStdFd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$STDERR</span><span class="token punctuation">,</span> <span class="token variable">$STDOUT</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重定向标准输出和错误输出</span>        @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">STDOUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        @<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token constant">STDERR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$STDOUT</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stdoutFile</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$STDERR</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">stdoutFile</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置进程名.     *     * @param string $title 进程名.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">setProcessTitle</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">get_called_class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'Server'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string">'proctitle'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'setproctitle'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @<span class="token function">setproctitle</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">version_compare</span><span class="token punctuation">(</span><span class="token function">phpversion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"5.5"</span><span class="token punctuation">,</span> <span class="token string">"ge"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'cli_set_process_title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @<span class="token function">cli_set_process_title</span><span class="token punctuation">(</span><span class="token variable">$title</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断pcntl拓展     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">checkPcntl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string">'pcntl_signal'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Error:Need PHP Pcntl extension!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s  %d  %s"</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">"Y-m-d H:i:s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 开启守护进程     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">'Running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">daemonize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">'Start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 停止守护进程     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过向进程id发送终止信号来停止进程</span>            <span class="token function">posix_kill</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">,</span> <span class="token constant">SIGTERM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pidFile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$pid</span><span class="token punctuation">.</span><span class="token string">' Stoped'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"Not Running"</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">'Is Running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'Not Running'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$argv</span><span class="token punctuation">;</span>        <span class="token variable">$command</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token variable">$command2</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'start'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$command2</span> <span class="token operator">===</span> <span class="token string">'-d'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">daemonize</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'stop'</span><span class="token punctuation">:</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'status'</span><span class="token punctuation">:</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">echo</span> <span class="token string">"Argv request start|stop|status "</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>php deamon.php  start  正常运行</li><li>php deamon.php  start  -d  进程守护化运行</li><li>php deamon.php  status  查看进程运行状态</li><li>php deamon.php  stop 停止运行</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>将Daemon作为基类,子类继承Deamon自定义job</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Work</span> <span class="token keyword">extends</span> <span class="token class-name">Daemon</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO 你的守护经常需要执行的任务</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// echo 'job process'.PHP_EOL;</span>            <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'/var/job.log'</span><span class="token punctuation">,</span> <span class="token string">'do work job'</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$work</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$work</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> daemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP多进程</title>
      <link href="/2019/02/15/php/fork/"/>
      <url>/2019/02/15/php/fork/</url>
      
        <content type="html"><![CDATA[<h3 id="PHP多进程"><a href="#PHP多进程" class="headerlink" title="PHP多进程"></a>PHP多进程</h3><ul><li>pcntl_fork()函数成功执行时会在父进程返回子进程的进程id(pid)，因为系统的初始进程init进程的pid为1，后来产生进程的pid都会大于此进程，所以我们可以通过判断pcntl_fork()的返回值大于1来确实当前进程是父进程；<br>而在子进程中，此函数的返回值会是固定值0，我们也可以通过判断pcntl_fork()的返回值为0来确定子进程；</li><li>pcntl_fork()函数在执行失败时，会在父进程返回-1,当然也不会有子进程产生。</li></ul><h4 id="简单的子进程生成例子"><a href="#简单的子进程生成例子" class="headerlink" title="简单的子进程生成例子"></a>简单的子进程生成例子</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//错误处理：创建子进程失败时返回-1.</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fork error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span>    <span class="token keyword">echo</span> <span class="token string">"parent \n"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//等待子进程中断，防止子进程成为僵尸进程。</span>    <span class="token function">pcntl_wait</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span>    <span class="token keyword">echo</span> <span class="token string">"child \n"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="多进程生成例子"><a href="#多进程生成例子" class="headerlink" title="多进程生成例子"></a>多进程生成例子</h4><pre class=" language-php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'FORK_NUMS'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pids</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token constant">FORK_NUMS</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fork error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待指定进程退出 </span>        <span class="token keyword">echo</span> <span class="token string">"pernet \n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"child id:"</span> <span class="token punctuation">.</span> <span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">" \n"</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在子进程中,需通过exit来退出，不然会产生递归多进程,父进程中不需要exit,不然会中断多进程。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="多进程写入文件"><a href="#多进程写入文件" class="headerlink" title="多进程写入文件"></a>多进程写入文件</h4><pre class=" language-php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'FORK_NUMS'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pids</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'./test.log'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token constant">FORK_NUMS</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fork error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pids</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_EX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//并发文件锁</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">' : '</span> <span class="token punctuation">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">" : {$num} \r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token constant">LOCK_UN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">": success \r\n"</span><span class="token punctuation">;</span>            <span class="token operator">++</span><span class="token variable">$num</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$pids</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待子进程完成</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="多进程生产封装"><a href="#多进程生产封装" class="headerlink" title="多进程生产封装"></a>多进程生产封装</h4><h5 id="用方法生产进程"><a href="#用方法生产进程" class="headerlink" title="用方法生产进程"></a>用方法生产进程</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">createProcess</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'fork error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$pid</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"child {$pid} process end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'handle'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createProcess</span><span class="token punctuation">(</span><span class="token string">'handle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//阻塞等子进程结束</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$childList</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$childList</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="用类生产进程"><a href="#用类生产进程" class="headerlink" title="用类生产进程"></a>用类生产进程</h5><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Process</span>  <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$callback</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//进程处理方法</span>    <span class="token keyword">private</span> <span class="token variable">$args</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进程处理参数</span>    <span class="token keyword">private</span> <span class="token variable">$pid</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子进程pid</span>    <span class="token keyword">private</span> <span class="token variable">$ppid</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主进程id</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">,</span><span class="token variable">$args</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ppid</span>     <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">callback</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span>     <span class="token operator">=</span> <span class="token variable">$args</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成子进程    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"fork  error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pid</span> <span class="token operator">=</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">posix_kill</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ppid</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检查主进程是否存在 存在则返回true</span>            <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">callback</span><span class="token punctuation">;</span>            <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 同步阻塞等子进程结束    */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">pcntl_waitpid</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">pid</span><span class="token punctuation">,</span> <span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$args</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'handle'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$cp</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Process</span><span class="token punctuation">(</span><span class="token string">'handle'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$cp</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$cp</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$v</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'主进程执行完毕'</span><span class="token punctuation">;</span></code></pre><h3 id="进程间通信（IPC）"><a href="#进程间通信（IPC）" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h3><p>通常linux中的进程通信方式有：消息队列、信号量、共享内存、信号、管道、socket。<a href="https://www.jianshu.com/p/08bcf724196b" target="_blank" rel="noopener">转载</a></p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>消息队列是存放在内存中的一个队列。如下代码将创建3个生产者子进程，2个消费者子进程。这5个进程将通过消息队列通信。<br>由于消息队列取数据是原子性的,所以不需要锁或者信号量</p><pre class=" language-php"><code class="language-php"><span class="token variable">$parentPid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"parent progress pid:{$parentPid}\n"</span><span class="token punctuation">;</span><span class="token variable">$childList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建消息队列,以及定义消息类型(类似于数据库中的库)</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msgQueue</span> <span class="token operator">=</span> <span class="token function">msg_get_queue</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">MSG_TYPE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产者</span><span class="token keyword">function</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$msgQueue</span><span class="token punctuation">;</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$repeatNum</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$repeatNum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">"({$pid})progress create! {$i}"</span><span class="token punctuation">;</span>        <span class="token function">msg_send</span><span class="token punctuation">(</span><span class="token variable">$msgQueue</span><span class="token punctuation">,</span><span class="token constant">MSG_TYPE</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 消费者</span><span class="token keyword">function</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$msgQueue</span><span class="token punctuation">;</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$repeatNum</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$repeatNum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$rel</span> <span class="token operator">=</span> <span class="token function">msg_receive</span><span class="token punctuation">(</span><span class="token variable">$msgQueue</span><span class="token punctuation">,</span><span class="token constant">MSG_TYPE</span><span class="token punctuation">,</span><span class="token variable">$msgType</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token variable">$message</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"{$message} | consumer({$pid}) destroy \n"</span><span class="token punctuation">;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createProgress</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建失败</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"fork progress error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子进程执行程序</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"({$pid})child progress end!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 父进程执行程序</span>        <span class="token keyword">return</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3个写进程</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">createProgress</span><span class="token punctuation">(</span><span class="token string">'producer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"create producer child progress: {$pid} \n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2个写进程</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">createProgress</span><span class="token punctuation">(</span><span class="token string">'consumer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"create consumer child progress: {$pid} \n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等待所有子进程结束</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$childList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$childPid</span> <span class="token operator">=</span> <span class="token function">pcntl_wait</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$childPid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$childPid</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"({$parentPid})main progress end!\n"</span><span class="token punctuation">;</span></code></pre><h4 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h4><p>信号是一种系统调用。通常我们用的kill命令就是发送某个信号给某个进程的。具体有哪些信号可以在liunx/mac中运行kill -l查看。<br>php 中发送信号用 posix_kill($pid,SIGINT);<br>下面这个例子中，父进程等待5秒钟，向子进程发送sigint信号。子进程捕获信号，掉信号处理函数处理。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$parentPid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"parent progress pid:{$parentPid}\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个信号处理函数</span><span class="token keyword">function</span> <span class="token function">sighandler</span><span class="token punctuation">(</span><span class="token variable">$signo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"{$pid} progress,oh no ,I'm killed!\n"</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建失败</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"fork progress error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子进程执行程序</span>    <span class="token comment" spellcheck="true">// 注册信号处理函数</span>    <span class="token keyword">declare</span><span class="token punctuation">(</span>ticks<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pcntl_signal</span><span class="token punctuation">(</span><span class="token constant">SIGINT</span><span class="token punctuation">,</span> <span class="token string">"sighandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"{$pid} child progress is running!\n"</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"({$pid})child progress end!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父进程执行程序</span>    <span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5秒后,父进程向子进程发送sigint信号.</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">posix_kill</span><span class="token punctuation">(</span><span class="token variable">$pid</span><span class="token punctuation">,</span><span class="token constant">SIGINT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"({$parentPid})main progress end!\n"</span><span class="token punctuation">;</span></code></pre><h4 id="信号量与共享内存"><a href="#信号量与共享内存" class="headerlink" title="信号量与共享内存"></a>信号量与共享内存</h4><ul><li>信号量：是系统提供的一种原子操作，一个信号量，同时只有你个进程能操作。一个进程获得了某个信号量，就必须被该进程释放掉。</li><li>共享内存：是系统在内存中开辟的一块公共的内存区域，任何一个进程都可以访问，在同一时刻，可以有多个进程访问该区域，为了保证数据的一致性，需要对该内存区域加锁或信号量。</li></ul><pre class=" language-php"><code class="language-php"><span class="token variable">$parentPid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"parent progress pid:{$parentPid}\n"</span><span class="token punctuation">;</span><span class="token variable">$childList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建共享内存,创建信号量,定义共享key</span><span class="token variable">$shm_id</span> <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sem_id</span> <span class="token operator">=</span> <span class="token function">ftok</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$shareMemory</span> <span class="token operator">=</span> <span class="token function">shm_attach</span><span class="token punctuation">(</span><span class="token variable">$shm_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$signal</span> <span class="token operator">=</span> <span class="token function">sem_get</span><span class="token punctuation">(</span><span class="token variable">$sem_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">SHARE_KEY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 生产者</span><span class="token keyword">function</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$shareMemory</span><span class="token punctuation">;</span>    <span class="token keyword">global</span> <span class="token variable">$signal</span><span class="token punctuation">;</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$repeatNum</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$repeatNum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得信号量</span>        <span class="token function">sem_acquire</span><span class="token punctuation">(</span><span class="token variable">$signal</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shm_has_var</span><span class="token punctuation">(</span><span class="token variable">$shareMemory</span><span class="token punctuation">,</span><span class="token constant">SHARE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 有值,加一</span>            <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token function">shm_get_var</span><span class="token punctuation">(</span><span class="token variable">$shareMemory</span><span class="token punctuation">,</span><span class="token constant">SHARE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$count</span> <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">shm_put_var</span><span class="token punctuation">(</span><span class="token variable">$shareMemory</span><span class="token punctuation">,</span><span class="token constant">SHARE_KEY</span><span class="token punctuation">,</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"({$pid}) count: {$count}\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无值,初始化</span>            <span class="token function">shm_put_var</span><span class="token punctuation">(</span><span class="token variable">$shareMemory</span><span class="token punctuation">,</span><span class="token constant">SHARE_KEY</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"({$pid}) count: 0\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 用完释放</span>        <span class="token function">sem_release</span><span class="token punctuation">(</span><span class="token variable">$signal</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createProgress</span><span class="token punctuation">(</span><span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建失败</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"fork progress error!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子进程执行程序</span>        <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">posix_getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"({$pid})child progress end!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 父进程执行程序</span>        <span class="token keyword">return</span> <span class="token variable">$pid</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3个写进程</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">createProgress</span><span class="token punctuation">(</span><span class="token string">'producer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$pid</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"create producer child progress: {$pid} \n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等待所有子进程结束</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$childList</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$childPid</span> <span class="token operator">=</span> <span class="token function">pcntl_wait</span><span class="token punctuation">(</span><span class="token variable">$status</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$childPid</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$childList</span><span class="token punctuation">[</span><span class="token variable">$childPid</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 释放共享内存与信号量</span><span class="token function">shm_remove</span><span class="token punctuation">(</span><span class="token variable">$shareMemory</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_remove</span><span class="token punctuation">(</span><span class="token variable">$signal</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"({$parentPid})main progress end!\n"</span><span class="token punctuation">;</span></code></pre><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><p>管道是比较常用的多进程通信手段，管道分为无名管道与有名管道，无名管道只能用于具有亲缘关系的进程间通信，而有名管道可以用于同一主机上任意进程。这里只介绍有名管道。下面的例子，子进程写入数据，父进程读取数据。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 定义管道路径,与创建管道</span><span class="token variable">$pipe_path</span> <span class="token operator">=</span> <span class="token string">'/data/test.pipe'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$pipe_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">posix_mkfifo</span><span class="token punctuation">(</span><span class="token variable">$pipe_path</span><span class="token punctuation">,</span><span class="token number">0664</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">"create pipe error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 子进程,向管道写数据</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$pipe_path</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'child end!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 父进程,从管道读数据</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$pipe_path</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$rel</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"{$rel}\n"</span><span class="token punctuation">;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$rand</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ总结</title>
      <link href="/2019/01/25/rabbitmq/"/>
      <url>/2019/01/25/rabbitmq/</url>
      
        <content type="html"><![CDATA[<p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）</p><h2 id="Rabbitmq特性"><a href="#Rabbitmq特性" class="headerlink" title="Rabbitmq特性"></a>Rabbitmq特性</h2><ul><li>可靠性：持久化存储、ACK消息确认、发布confirm、事务支持。</li><li>灵活的路由：交换机功能。交换机类型：direct,topic,headers,fanout。</li><li>ha镜像，master-slave 多协议支持,<a href="https://blog.csdn.net/qq_35246620/article/details/72473098" target="_blank" rel="noopener">集群节点</a></li><li>多语言客户端支持：java、c#、ruby、Python、php、c、scale、nodejs、go、erlang…</li><li>管理界面功能丰富、命令行rabbitmqctl、RPC远程调度</li></ul><h2 id="AMQP高级消息协议"><a href="#AMQP高级消息协议" class="headerlink" title="AMQP高级消息协议"></a>AMQP高级消息协议</h2><p>AMQP(高级消息队列协议) 是一个异步消息传递所使用的应用层协议规范，作为线路层协议，AMQP 客户端能够无视消息的来源任意发送和接受信息。<br>AMQP四个重要组成部分：</p><ul><li>virtual host，虚拟主机</li><li>exchange，交换机</li><li>queue，队列</li><li>binding，绑定</li></ul><p>一个虚拟主机持有一组交换机、队列和绑定。每台rabbitmq服务器可以有多个虚拟主机，默认为/。虚拟主机主要用于用户权限控制。因为RabbitMQ当中，用户只能在虚拟主机的粒度进行权限控制。因此，如果需要禁止A组访问B组的交换机/队列/绑定，必须为A和B分别创建一个虚拟主机。</p><p>队列（Queues）是你的消息（messages）的终点，可以理解成装消息的容器。队列是由消费者（Consumer）通过程序建立的，如果一个消费者试图创建一个已经存在的队列，RabbitMQ会直接忽略这个请求。</p><p>交换机（Exchange）可以理解成具有路由表的路由程序。每个消息都有一个称为路由键（routingkey）的属性，就是一个简单的字符串。每个交换机都是一个独立的进程，合理利用服务器多核CPU使得rabbitmq性能得到最佳。交换机有多种类型，不同的交换机类型CPU开销是不一样的，一般来说CPU开销顺序是:</p><p><code>TOPIC &gt; DIRECT &gt; FANOUT &gt; NAMELESS</code></p><h2 id="交换机类型"><a href="#交换机类型" class="headerlink" title="交换机类型"></a>交换机类型</h2><p>消息不直接发送到queue中，中间有一个exchange做消息分发，producer甚至不知道消息发送到那个队列中去。因此，当exchange收到message时，必须准确知道该如何分发。是推送到一定规则的queue，还是推送到多个queue中，还是被丢弃。这些规则都是通过exchange去定义的。</p><ul><li>匿名交换机，工作队列模式 </li><li>扇形交换机（fanout），发布订阅/广播模式 </li><li>直连交换机（direct），路由绑定/广播精确匹配 </li><li>主题交换机（topic），路由规则/广播模糊匹配 </li><li>头交换机（header），定义AMQP头部属性</li></ul><h2 id="相关特性"><a href="#相关特性" class="headerlink" title="相关特性"></a>相关特性</h2><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>如果你没有特意告诉RabbitMQ，那么在它退出或者崩溃的时候，将会丢失所有队列和消息。已经定义过非持久化的队列不能再定义为持久化队列，我们得重新命名一个新的队列。必须把“队列”和“消息”都设为持久化。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//交换机持久化</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exchange_declare</span><span class="token punctuation">(</span><span class="token string">'exchange'</span><span class="token punctuation">,</span> <span class="token string">'fanout'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//队列持久化</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token string">'task_queue'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//消息持久化</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token variable">$body</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'delivery_mode'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Ack消息确认"><a href="#Ack消息确认" class="headerlink" title="Ack消息确认"></a>Ack消息确认</h3><p>当消息被RabbitMQ发送给消费者（consumers）之后，马上就会在内存中移除。这种情况，你只要把一个工作者（worker）停止，正在处理的消息就会丢失。同时，所有发送到这个工作者的还没有处理的消息都会丢失。我们不想丢失任何任务消息。如果一个工作者（worker）挂掉了，我们希望任务会重新发送给其他的工作者（worker）。为了防止消息丢失，RabbitMQ提供了消息响应（acknowledgments）。消费者会通过一个ack（响应），告诉RabbitMQ已经收到并处理了某条消息，然后RabbitMQ就会释放并删除这条消息。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token string">'task_queue'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在回调函数中发送ack消息</span><span class="token variable">$msg</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'channel'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_ack</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'delivery_tag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Qos公平调度"><a href="#Qos公平调度" class="headerlink" title="Qos公平调度"></a>Qos公平调度</h3><p>如果多个worker进程中，某个worker处理比较慢，另一个worker比较快，默认RabbitMQ只管分发进入队列的消息，不会关心有多少消费者（consumer）没有作出响应，这样会使得比较慢的worker消息堆积过多，导致任务分配不均。Qos公平调度设置prefetch_count=1，即在同一时刻，不会发送超过1条消息给一个工作者（worker），直到它已经处理了上一条消息并且作出了响应。这样，RabbitMQ就会把消息分发给下一个空闲的工作者（worker）。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//$prefetch_size,$prefetch_count,$global</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_qos</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="消息事务"><a href="#消息事务" class="headerlink" title="消息事务"></a>消息事务</h3><p>将消息设为持久化并不能完全保证不会丢失。持久化只是告诉了RabbitMq要把消息存到硬盘，但从RabbitMq收到消息到保存之间还是有一个很小的间隔时间。因为RabbitMq并不是所有的消息都使用同步IO—它有可能只是保存到缓存中，并不一定会写到硬盘中。并不能保证真正的持久化，但已经足够应付我们的简单工作队列。如果你一定要保证持久化，我们需要改写代码来支持事务（transaction）。</p><pre class=" language-php"><code class="language-php"><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tx_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'task_queue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tx_commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="confirm消息确认"><a href="#confirm消息确认" class="headerlink" title="confirm消息确认"></a>confirm消息确认</h3><p>AMQP消息协议提供了事务支持，不过事务机制会导致性能急剧下降，所以rabbitmq特别引入了confirm机制。</p><p>Confirm有三种编程方式：</p><ol><li><p>普通confirm模式。每发送一条消息后，调用wait_for_pending_acks()方法，等待服务器端confirm。实际上是一种串行confirm。</p></li><li><p>批量confirm模式。每次发送一批消息后，调用wait_for_pending_acks()方法，等待服务器端confirm。</p></li><li><p>异步confirm模式。提供一个回调方法，服务器端confirm了一条(或多条)消息后客户端会回调这个方法。</p></li></ol><p>代码示例：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//一旦消息被设为confirm模式，就不能设置事务模式，反之亦然</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">confirm_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞等待消息确认</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">wait_for_pending_acks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//异步回调消息确认</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set_ack_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set_nack_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="PHP使用-Rabbitmq"><a href="#PHP使用-Rabbitmq" class="headerlink" title="PHP使用 Rabbitmq"></a>PHP使用 Rabbitmq</h2><p>使用 php-amqplib/php-amqplib 进行二次封装可以满足基本需求</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/* * rabbitMQ封装 */</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Libraries<span class="token punctuation">\</span>MQ</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// define('AMQP_PASSIVE', true);</span><span class="token comment" spellcheck="true">// define('AMQP_DEBUG', false);</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>AMQPException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpAmqpLib<span class="token punctuation">\</span>Connection<span class="token punctuation">\</span>AMQPConnection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">PhpAmqpLib<span class="token punctuation">\</span>Message<span class="token punctuation">\</span>AMQPMessage</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AMQP</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$channel</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$conn</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$system</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$consumer_tag</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$isRePublish</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$mid</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$config_path</span> <span class="token operator">=</span> <span class="token string">'queue.RMQ_CONFIG'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$system</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化后rabbitMQ连接     * @param string $system 系统名称     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetConnection</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$system</span> <span class="token operator">!=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">system</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resetConnection</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 强制重置rabbitMQ连接     * @param string $system 系统名称     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">resetConnection</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$rmqconfig</span> <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">config_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$rmqconfig</span><span class="token punctuation">[</span><span class="token variable">$system</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$vhost</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$rmqconfig</span><span class="token punctuation">[</span><span class="token variable">$system</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span>         <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPConnection</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$port</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token variable">$vhost</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMQPException</span><span class="token punctuation">(</span><span class="token variable">$system</span><span class="token punctuation">.</span><span class="token string">'链接失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">consumer_tag</span> <span class="token operator">=</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">':'</span><span class="token punctuation">.</span><span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span>      <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">system</span>       <span class="token operator">=</span> <span class="token variable">$system</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//            $this->ackHandler();</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMQPException</span><span class="token punctuation">(</span><span class="token string">'systme 没有配置'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 设置消息体大小限制     * @param string|int $bytes 字节数     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">setBodySizeLimit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setBodySizeLimit</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 添加交换器     * @param string $ename 交换器名称     * @param string $type 交换器的消息传递方式 可选:'fanout','direct','topic','headers'     * 'fanout':不处理(忽略)路由键，将消息广播给绑定到该交换机的所有队列     * 'diect':处理路由键，对路由键进行全文匹配。对于路由键为"aaa_rain"的消息只会分发给路由键绑定为"aaa_rain"的队列,不会分发给路由键绑定为"aaa_music"的队列     * 'topic':处理路由键，按模式匹配路由键。模式符号 "#" 表示一个或多个单词，"*" 仅匹配一个单词。如 "aaa.#" 可匹配 "aaa.rain.music"，但 "aaa.*" 只匹配 "aaa.rain"和"aaa.music"。只能用"."进行连接，键长度不超过255字节     * @param boolean $durable 是否持久化     * @param boolean $auto_delete 当所有绑定队列都不再使用时，是否自动删除该交换机     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addExchange</span><span class="token punctuation">(</span><span class="token variable">$ename</span><span class="token punctuation">,</span> <span class="token variable">$type</span> <span class="token operator">=</span> <span class="token string">'fanout'</span><span class="token punctuation">,</span> <span class="token variable">$durable</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token variable">$auto_delete</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exchange_declare</span><span class="token punctuation">(</span><span class="token variable">$ename</span><span class="token punctuation">,</span> <span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$durable</span><span class="token punctuation">,</span> <span class="token variable">$auto_delete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 添加队列     * @param string $qname 队列名称     * @param boolean $durable 是否持久化     * @param boolean $exclusive 仅创建者可以使用的私有队列，断开后自动删除     * @param boolean $auto_delete 当所有消费客户端连接断开后，是否自动删除队列     * return int 该队列的ready消息数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token variable">$qname</span><span class="token punctuation">,</span> <span class="token variable">$durable</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token variable">$exclusive</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$auto_delete</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token variable">$qname</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$durable</span><span class="token punctuation">,</span> <span class="token variable">$exclusive</span><span class="token punctuation">,</span> <span class="token variable">$auto_delete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 绑定队列和交换器     * @param string $qname 队列名称     * @param string $ename 交换器名称     * @param string $routing_key 路由键 注:在fanout的交换器中路由键会被忽略     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$qname</span><span class="token punctuation">,</span> <span class="token variable">$ename</span><span class="token punctuation">,</span> <span class="token variable">$routing_key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queue_bind</span><span class="token punctuation">(</span><span class="token variable">$qname</span><span class="token punctuation">,</span> <span class="token variable">$ename</span><span class="token punctuation">,</span> <span class="token variable">$routing_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * 设置消费者预取消息数量     * @param string|int $count 预取消息数量     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setQos</span><span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_qos</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token variable">$count</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 基础模型之消息发布     * @param string $exchange 交换器名称     * @param string|array $msg 发布内容     * @param string $mqtype 发布消息的类型     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token variable">$exchang</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$message</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span> <span class="token variable">$msg</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'content_type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text/plain'</span><span class="token punctuation">,</span> <span class="token string">'delivery_mode'</span> <span class="token operator">=</span><span class="token operator">></span> AMQPMessage<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">DELIVERY_MODE_PERSISTENT</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$exchang</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">publishLog</span><span class="token punctuation">(</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * confirm  pushlish     * @param string $exchange 交换器名称     * @param string|array $msg 发布内容     * @param string $mqtype 发布消息的类型     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ackPublish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token variable">$exchang</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token variable">$exchang</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">publishLog</span><span class="token punctuation">(</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 批量发布     * @param array $exchange 交换器名称     * @param string|array $msg 发布内容     * @param string $routing_key 路由     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">batchPublish</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMQPException</span><span class="token punctuation">(</span><span class="token string">"批量推送msg必须要为数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$msg</span> <span class="token keyword">as</span>  <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$message</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'content_type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text/plain'</span><span class="token punctuation">,</span> <span class="token string">'delivery_mode'</span> <span class="token operator">=</span><span class="token operator">></span> AMQPMessage<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">DELIVERY_MODE_PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">batch_basic_publish</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">publish_batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">publishLog</span><span class="token punctuation">(</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$routing_key</span><span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 基础模型之消息接受     * @param string $exchange     * @param string $queue     * @param array $callback     * @param string $mqtype     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token variable">$queue</span> <span class="token punctuation">,</span> <span class="token variable">$callback</span><span class="token punctuation">,</span> <span class="token variable">$no_ack</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">callback</span> <span class="token operator">=</span> <span class="token variable">$callback</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_consume</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">consumer_tag</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$no_ack</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span><span class="token string">'process_message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*        while(count($this->ch->callbacks)){            $this->channel->wait();        }*/</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">callbacks</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$read</span>   <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// add here other sockets that you need to attend</span>            <span class="token variable">$write</span>  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token variable">$except</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token variable">$num_changed_streams</span> <span class="token operator">=</span> <span class="token function">stream_select</span><span class="token punctuation">(</span><span class="token variable">$read</span><span class="token punctuation">,</span> <span class="token variable">$write</span><span class="token punctuation">,</span> <span class="token variable">$except</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AMQPException</span><span class="token punctuation">(</span><span class="token string">"队列接受异常或队列消息为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$num_changed_streams</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Pub/Sub 之批量消息接受，默认接受200条数据     * @param string $queue 队列名称     * @param int $limit 返回条数     * @return array      */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">batchGet</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token variable">$limit</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$messageCount</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">queue_declare</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$i</span>        <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$max</span>      <span class="token operator">=</span> <span class="token variable">$limit</span> <span class="token operator">&lt;</span> <span class="token number">200</span> <span class="token operator">?</span> <span class="token variable">$limit</span> <span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token variable">$data</span>     <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$messageCount</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msg</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_get</span><span class="token punctuation">(</span><span class="token variable">$queue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_ack</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msg</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'delivery_tag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">msg</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">body</span><span class="token punctuation">;</span>            <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重推消息     * @param string|int $mid 重推消息id     * @param string $exchange 交换器名称     * @param string|array $msg 发布内容     * @param string $routing_key 路由键 注:在fanout的交换器中路由键会被忽略     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">rePublish</span><span class="token punctuation">(</span><span class="token variable">$mid</span><span class="token punctuation">,</span><span class="token variable">$exchange</span><span class="token punctuation">,</span> <span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token variable">$routing_key</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isRePublish</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">mid</span> <span class="token operator">=</span> <span class="token variable">$mid</span><span class="token punctuation">;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>        <span class="token variable">$tosend</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQPMessage</span><span class="token punctuation">(</span><span class="token variable">$msg</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'content_type'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text/plain'</span><span class="token punctuation">,</span> <span class="token string">'delivery_mode'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_publish</span><span class="token punctuation">(</span><span class="token variable">$tosend</span><span class="token punctuation">,</span> <span class="token variable">$exchange</span><span class="token punctuation">,</span> <span class="token variable">$routing_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">waitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">isRePublish</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为了防止之后调用其他推送方法出现异常</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 销毁队列中的数据     * @param $msg_obj     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">basicAck</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_ack</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'delivery_tag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 推送回调处理     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ackHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set_ack_handler</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span>AMQPMessage <span class="token variable">$message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"Message acked with content "</span> <span class="token punctuation">.</span> <span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">body</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set_nack_handler</span><span class="token punctuation">(</span>            <span class="token keyword">function</span> <span class="token punctuation">(</span>AMQPMessage <span class="token variable">$message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">"Message nacked with content "</span> <span class="token punctuation">.</span> <span class="token variable">$message</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">body</span> <span class="token punctuation">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">confirm_select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">waitAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">wait_for_pending_acks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 默认回调函数     * @param object $msg_obj     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">process_message</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$rerult</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">callback</span><span class="token punctuation">,</span><span class="token variable">$msg_obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$rerult</span><span class="token punctuation">[</span><span class="token string">'ack'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basicAck</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关闭消费者     * @param $msg_obj     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">cancelConsumer</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$msg_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'channel'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">basic_cancel</span><span class="token punctuation">(</span><span class="token variable">$msg_obj</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">delivery_info</span><span class="token punctuation">[</span><span class="token string">'consumer_tag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">channel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">conn</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">publishLog</span><span class="token punctuation">(</span><span class="token variable">$exchange</span><span class="token punctuation">,</span><span class="token variable">$route</span><span class="token punctuation">,</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">getNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"[交换机:{$exchange}][路由:{$route}][数量:$count]"</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对ID进行隐藏</title>
      <link href="/2019/01/11/php/hashid/"/>
      <url>/2019/01/11/php/hashid/</url>
      
        <content type="html"><![CDATA[<h2 id="Hashid"><a href="#Hashid" class="headerlink" title="Hashid"></a>Hashid</h2><p>不希望对外暴露有规则的数据索引，比如用户 ID 、媒体资源 ID 、商品 ID 、订单号、注册码、优惠码等，防止爬虫侵扰。那就将ID编码咯。</p><p>解决方案 <a href="https://github.com/ivanakimov/hashids.php" target="_blank" rel="noopener">vinkla/hashids</a> composer 懂的哈<br>可以自己加salt，这样每个系统的加密就不一样的，不容易被破解。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Hashids<span class="token punctuation">\</span>Hashids</span><span class="token punctuation">;</span><span class="token variable">$hashids</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashids</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hashids</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Laravel 更加有优雅的解决方案哟 [Laravel Hashid](<a href="https://learnku.com/courses/laravel-package/hash-data-id-vinklahashids/1945）" target="_blank" rel="noopener">https://learnku.com/courses/laravel-package/hash-data-id-vinklahashids/1945）</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Larael </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>延迟队列</title>
      <link href="/2019/01/01/delay-queue/"/>
      <url>/2019/01/01/delay-queue/</url>
      
        <content type="html"><![CDATA[<p>比如要实现30分钟未支付订单取消,量少的时候可以用数据库轮训的方式,但是数据量大的话，轮训的并发和准确性就不可靠,这个时候可以用延迟队列来解决这个问题</p><h3 id="延迟队列的实现"><a href="#延迟队列的实现" class="headerlink" title="延迟队列的实现"></a>延迟队列的实现</h3><ul><li>[RabbitMQ] RabbitMQ通过<a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange" target="_blank" rel="noopener">RabbitMQ Delayed Message Plugin</a>可支持延迟队列</li><li>[Redis] Redis的Sorted Set可被用于实现简单的延迟队列。利用Redis的Lua支持我们也可以将基建设成一个功能全面的延迟队列服务。</li><li>[Redis + RabbitMQ] redis用来消费任务不可靠，没有ack机制支持,如果消费的脚本出现异常,那这个任务就有可能丢失,redis可以仅仅用来做延迟,取到消息后直接推到  RabbitMQ 或者 Kafka 进行消费</li></ul><h3 id="Redis-实现延迟队列"><a href="#Redis-实现延迟队列" class="headerlink" title="Redis 实现延迟队列"></a>Redis 实现延迟队列</h3><p>Sorted Set是一个有序的集合，集合内元素的排序基于其加入集合时指定的score。通过ZRANGEBYSCORE命令，我们可以取得score在指定区间内的元素。将集合中的元素做为消息，score视为延迟的时间，这便是一个延迟队列的模型。</p><p>生产者通过ZADD将消息发送到队列中：</p><pre class=" language-php"><code class="language-php"><span class="token constant">ZADD</span> delay<span class="token operator">-</span>queue <span class="token number">1520985600</span> <span class="token string">"publish article"</span></code></pre><p>消费者通过ZRANGEBYSCORE获取消息。如果时间未到，将得不到消息；当时间已到或已超时，都可以得到消息：<br>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]<br>min 和 max 可以是 -inf 和 +inf ，这样一来，你就可以在不知道有序集的最低和最高 score 值的情况下，使用 ZRANGEBYSCORE 这类命令。</p><pre class=" language-php"><code class="language-php"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> <span class="token constant">ZRANGEBYSCORE</span> delay<span class="token operator">-</span>queue <span class="token operator">-</span>inf <span class="token function">1520985599</span><span class="token punctuation">(</span>empty list <span class="token keyword">or</span> set<span class="token punctuation">)</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> <span class="token constant">ZRANGEBYSCORE</span> delay<span class="token operator">-</span>queue <span class="token operator">-</span>inf <span class="token number">1520985600</span> <span class="token constant">WITHSCORES</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"publish article"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1520985600"</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> <span class="token constant">ZRANGEBYSCORE</span> delay<span class="token operator">-</span>queue <span class="token operator">-</span>inf <span class="token number">1520985601</span> <span class="token constant">WITHSCORES</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"publish article"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1520985600"</span></code></pre><p>使用ZRANGEBYSCORE取得消息后，消息并没有从集合中删出。需要调用ZREM删除消息：</p><pre class=" language-php"><code class="language-php"><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">6379</span><span class="token operator">></span> <span class="token constant">ZREM</span> delay<span class="token operator">-</span>queue <span class="token string">"publish article"</span></code></pre><p>美中不足的是，消费者组合使用ZRANGEBYSCORE和ZREM的过程不是原子的，当有多个消费者时会存在竞争，可能使得一条消息被消费多次。此时需要使用Lua脚本保证消费操作的原子性：</p><pre class=" language-php"><code class="language-php">local message <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZRANGEBYSCORE'</span><span class="token punctuation">,</span> <span class="token constant">KEYS</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-inf'</span><span class="token punctuation">,</span> <span class="token constant">ARGV</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'WITHSCORES'</span><span class="token punctuation">,</span> <span class="token string">'LIMIT'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token shell-comment comment">#message > 0 then</span>  redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'ZREM'</span><span class="token punctuation">,</span> <span class="token constant">KEYS</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> message<span class="token punctuation">;</span><span class="token keyword">else</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>end</code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 延迟队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 分布式锁</title>
      <link href="/2018/12/04/redis-lock/"/>
      <url>/2018/12/04/redis-lock/</url>
      
        <content type="html"><![CDATA[<p>实现一个分布式锁定，我们至少要考虑它能满足一下的这些需求:</p><ul><li>互斥，就是要在任何的时刻，同一个锁只能够有一个客户端用户锁定.</li><li>不会死锁，就算持有锁的客户端在持有期间崩溃了，但是也不会影响后续的客户端加锁</li><li>谁加锁谁解锁，很好理解，加锁和解锁的必须是同一个客户端</li></ul><h3 id="Redis-分布式锁"><a href="#Redis-分布式锁" class="headerlink" title="Redis 分布式锁"></a>Redis 分布式锁</h3><p>这里使用PRedis来访问Redis</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">use</span> <span class="token package">PRedis</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> is_block <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取阻塞获取锁</span>    <span class="token keyword">protected</span> <span class="token variable">$_redis</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前请求id     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$request_id</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 锁过期时间     * 单位：秒     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token variable">$expiredTime</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取阻塞锁最长等待时间     * 不宜过长，请考虑实际情况单次锁释放时间设置     * 高并发情况，较长阻塞时间会造成大量进程堆积     * 单位：秒     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token variable">$waitTime</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 阻塞锁重试频率     * 每次请求的间隔时间     * 单位: 微秒     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token variable">$frequency</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_redis</span> <span class="token operator">=</span> PRedis<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token string">'lock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$req_id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$policy</span> <span class="token operator">===</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BLOCKED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">'false'</span><span class="token punctuation">;</span>            <span class="token variable">$beginTime</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$req_id</span><span class="token punctuation">,</span> <span class="token string">'PX'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">expiredTime</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'NX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'OK'</span> <span class="token operator">===</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token variable">$beginTime</span><span class="token markup">&lt;=$this-></span>waitTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">usleep</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">frequency</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token string">'OK'</span> <span class="token operator">===</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$result</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$req_id</span><span class="token punctuation">,</span> <span class="token string">'PX'</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">expiredTime</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">'NX'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">'OK'</span> <span class="token operator">===</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$result</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用lua 保证原子操作,客户端 A 加锁成功后一段时间再来解锁，在执行删除 del 操作的时候锁过期了，而且这时候又有其他客户端 B 来加锁 (这时候加锁是肯定成功的，因为客户端 A 的锁过期了), 这时客户端 A 再执行删除 del 操作，会把客户端 B 的锁给清了.     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$lua</span> <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>        <span class="token variable">$req_id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$lua</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$req_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$result</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @return $request_id 最好保证唯一值     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$request_id</span> <span class="token operator">=</span> <span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$request_id</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">static</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$request_id</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$request_id</span> <span class="token punctuation">.</span> <span class="token function">getmypid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>$this-&gt;_redis-&gt;set($name, $req_id, ‘PX’, $this-&gt;expiredTime * 1000, ‘NX’);</p><ul><li>第一个 name 是锁的名字，这个由具体业务逻辑控制，保证唯一即可，比如并发更新一个 sku的库存的时候 SKU0001就可以加上锁以免超卖</li><li>第二个是请求 ID,这样做的目的主要是为了保证加解锁的唯一性。这样我们就可以知道该锁是哪个客户端加的.</li><li>第三个参数是一个标识符，标识时间戳以毫秒为最小单位</li><li>具体的过期时间</li><li>这个参数是 NX, 表示当 key 不存在时我们才进行 set 操作，这样锁就不会形成覆盖。</li><li>分布式唯一ID使用的<a href="https://github.com/Sxdd/php_snowflake" target="_blank" rel="noopener">snowflack</a>这个是编译安装，还有用swoole_lock实现的扩展包</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>niftyAdmin 自定义后台管理系统框架</title>
      <link href="/2018/12/01/php/nifty-admin/"/>
      <url>/2018/12/01/php/nifty-admin/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/yujiarong/niftyAdmin" target="_blank" rel="noopener">niftyAdmin</a>  基于Laravel5.5框架和<a href="http://wrapbootstrap.com/preview/WB0048JF7" target="_blank" rel="noopener">Nifty</a>前端组建的 基础管理系统框架<br><a href="http://nifty.dwyjr.cn/" target="_blank" rel="noopener">demo地址</a>  </p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Larave5.5,<a href="http://wrapbootstrap.com/preview/WB0048JF7" target="_blank" rel="noopener">nifty</a>后台管理模板,php &gt;=7.0.0</li><li>barryvdh/laravel-debugbar: ^3.1  调试器</li><li>maatwebsite/excel:^2.1  excel,csv,pdf等文件处理</li><li>php-amqplib/php-amqplib: ^2.7  rabbitmq队列处理,只需要配置一下参数 ,使用方法封装在Libraries/MQ中.</li><li>yajra/laravel-datatables-oracle  lavel datatables 集成使用很方便.</li><li>集成Passpord实现Oauth2的验证，也可以用密码授权令牌快速开发Api安全认证</li><li>已经集成登陆,注册和用户管理模块</li><li>已经集成Permission 用于RBAC权限管理，认证中间件可以根据自己的喜好改</li><li>菜单选中激活扩展：hieu-le/active</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>git clone </li><li>composer install</li><li>cp .env.example .env 复制配置文件</li><li>php artisan key:generate 创建新的应用程序密钥</li><li>编辑 .env 文件配置数据库<ul><li>DB_HOST=YOUR_DATABASE_HOST</li><li>DB_DATABASE=YOUR_DATABASE_NAME</li><li>DB_USERNAME=YOUR_DATABASE_USERNAME</li><li>DB_PASSWORD=YOUR_DATABASE_PASSWORD</li></ul></li><li>php artisan migrate  数据库迁移</li><li>php artisan db:seed  数据库填充</li><li>windows可以直接使用 php artisan serve  <a href="http://localhost:8000访问" target="_blank" rel="noopener">http://localhost:8000访问</a>, 使用nginx配置需要注意 try_files $uri $uri/ /index.php?$query_string;</li><li>如果要使用passport  需要 php artisan passport:install <a href="https://learnku.com/laravel/t/22586" target="_blank" rel="noopener">详解</a></li><li>App\Http\Middleware\PermissionMiddleware 这个类是自定义的权限中间件，可以自定义修改</li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pypppeteer</title>
      <link href="/2018/06/21/python/pyppeteer/"/>
      <url>/2018/06/21/python/pyppeteer/</url>
      
        <content type="html"><![CDATA[<p>之前做爬虫或者浏览器自动化操作都用selenium ，再配合docker可以进行分布式部署,但是selenium太耗性能,这里有另外个选择<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a>谷歌浏览器在17年自行开发了Chrome Headless特性，并与之同时推出了puppeteer，可以理解成我们日常使用的Chrome的无界面版本以及对其进行操控的js接口套装</p><h3 id="pyppeteer"><a href="#pyppeteer" class="headerlink" title="pyppeteer"></a>pyppeteer</h3><pre class=" language-php"><code class="language-php">import asynciofrom pyppeteer import launchasync def <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    browser <span class="token operator">=</span> await <span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'headless'</span><span class="token punctuation">:</span>False<span class="token punctuation">}</span><span class="token punctuation">)</span>    page <span class="token operator">=</span> await browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    await page<span class="token punctuation">.</span><span class="token keyword">goto</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//http://nifty.dwyjr.cn')</span>    await page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'input[name="email"]'</span><span class="token punctuation">,</span> <span class="token string">'yujiarong@sailvan.com'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"delay"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    await page<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'input[name="password"]'</span><span class="token punctuation">,</span> <span class="token string">'yujiarong'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"delay"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    await page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">'#container > div.cls-content > div > div.panel-body > form > button'</span><span class="token punctuation">)</span>    await page<span class="token punctuation">.</span><span class="token function">screenshot</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">'example.png'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    cookies <span class="token operator">=</span>  await page<span class="token punctuation">.</span><span class="token function">cookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     await browser<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span> cookies<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span><span class="token function">get_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span>    asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>loop<span class="token punctuation">.</span><span class="token function">run_until_complete</span><span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>pyppeteer支持异步，具体操作可以直接看<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a>的文档 ，pyppeteer的命令差不多</p><ul><li>用来截屏 </li><li>登陆获取cookie</li><li>爬去异步渲染的页面信息</li><li>并发操作默写不可描述的东西 嘿嘿</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pypppeteer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>concurrent.futures 并发操作</title>
      <link href="/2018/05/11/python/futures-thread/"/>
      <url>/2018/05/11/python/futures-thread/</url>
      
        <content type="html"><![CDATA[<p><a href>concurrent.futures</a>模块的基础是Exectuor，Executor是一个抽象类，它不能被直接使用。但是它提供的两个子类ThreadPoolExecutor和ProcessPoolExecutor却是非常有用，顾名思义两者分别被用来创建线程池和进程池的代码。我们可以将相应的tasks直接放入线程池/进程池，不需要维护Queue来操心死锁的问题，线程池/进程池会自动帮我们调度。</p><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><pre class=" language-php"><code class="language-php">from concurrent<span class="token punctuation">.</span>futures import ProcessPoolExecutorimport os<span class="token punctuation">,</span>time<span class="token punctuation">,</span>randomdef <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s is running'</span> <span class="token operator">%</span>os<span class="token punctuation">.</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p<span class="token operator">=</span><span class="token function">ProcessPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">#不填则默认为cpu的个数</span>    l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obj<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span>i<span class="token punctuation">)</span>   <span class="token shell-comment comment">#submit()方法返回的是一个future实例，要得到结果需要用obj.result()</span>        l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token shell-comment comment">#类似用from multiprocessing import Pool实现进程池中的close及join一起的作用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># print([obj for obj in l])</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>obj<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> obj in l<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span>    <span class="token shell-comment comment">#上面方法也可写成下面的方法</span>    <span class="token shell-comment comment"># start = time.time()</span>    <span class="token shell-comment comment"># with ProcessPoolExecutor() as p:   #类似打开文件,可省去.shutdown()</span>    <span class="token shell-comment comment">#     future_tasks = [p.submit(task, i) for i in range(10)]</span>    <span class="token shell-comment comment"># print(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># print([obj.result() for obj in future_tasks])</span>    <span class="token shell-comment comment"># print(time.time() - start)</span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><pre class=" language-php"><code class="language-php">from concurrent<span class="token punctuation">.</span>futures import ProcessPoolExecutor<span class="token punctuation">,</span>ThreadPoolExecutorimport threadingimport os<span class="token punctuation">,</span>time<span class="token punctuation">,</span>randomdef <span class="token function">task</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s:%s is running'</span> <span class="token operator">%</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p<span class="token operator">=</span><span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token shell-comment comment">#不填则默认为cpu的个数*5</span>    l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    start<span class="token operator">=</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        obj<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token shell-comment comment">#异步</span>        l<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    p<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>obj<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> obj in l<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token shell-comment comment">#上面方法也可写成下面的方法</span>    <span class="token shell-comment comment"># start = time.time()</span>    <span class="token shell-comment comment"># with ThreadPoolExecutor() as p:   #类似打开文件,可省去.shutdown()</span>    <span class="token shell-comment comment">#     future_tasks = [p.submit(task, i) for i in range(10)]</span>    <span class="token shell-comment comment"># print(</span><span class="token string">'='</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token shell-comment comment"># print([obj.result() for obj in future_tasks])</span>    <span class="token shell-comment comment"># print(time.time() - star</span>asyncio<span class="token punctuation">.</span><span class="token function">run_coroutine_threadsafe</span><span class="token punctuation">(</span><span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_loop<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> future </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协程 asyncio</title>
      <link href="/2018/04/11/python/asyncio/"/>
      <url>/2018/04/11/python/asyncio/</url>
      
        <content type="html"><![CDATA[<h3 id="关于asyncio的一些关键字的说明："><a href="#关于asyncio的一些关键字的说明：" class="headerlink" title="关于asyncio的一些关键字的说明："></a>关于asyncio的一些关键字的说明：</h3><ul><li>event_loop 事件循环：程序开启一个无限循环，把一些函数注册到事件循环上，当满足事件发生的时候，调用相应的协程函数</li><li>coroutine 协程：协程对象，指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象。协程对象需要注册到事件循环，由事件循环调用。</li><li>task 任务：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含了任务的各种状态</li><li>future: 代表将来执行或没有执行的任务的结果。它和task上没有本质上的区别</li></ul><h3 id="定义一个协程"><a href="#定义一个协程" class="headerlink" title="定义一个协程"></a>定义一个协程</h3><pre class=" language-php"><code class="language-php">import asyncioimport timenow <span class="token operator">=</span> lambda<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>async def <span class="token function">do_some_work</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting:"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span>    await asyncio<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"Done after {}s"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>async def <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    coroutine1 <span class="token operator">=</span> <span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    coroutine2 <span class="token operator">=</span> <span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    coroutine3 <span class="token operator">=</span> <span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>        asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span>coroutine1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token shell-comment comment">#创建任务</span>        asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span>coroutine2<span class="token punctuation">)</span><span class="token punctuation">,</span>        asyncio<span class="token punctuation">.</span><span class="token function">ensure_future</span><span class="token punctuation">(</span>coroutine3<span class="token punctuation">)</span>    <span class="token punctuation">]</span>    <span class="token keyword">return</span> await asyncio<span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>start <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span><span class="token function">new_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>results <span class="token operator">=</span> loop<span class="token punctuation">.</span><span class="token function">run_until_complete</span><span class="token punctuation">(</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> result in results<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Task ret:"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time:"</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span></code></pre><p>执行结果</p><pre class=" language-php"><code class="language-php">waiting<span class="token punctuation">:</span> <span class="token number">1</span>waiting<span class="token punctuation">:</span> <span class="token number">2</span>waiting<span class="token punctuation">:</span> <span class="token number">4</span>Task ret<span class="token punctuation">:</span> Done after 1sTask ret<span class="token punctuation">:</span> Done after 2sTask ret<span class="token punctuation">:</span> Done after 4sTime<span class="token punctuation">:</span> <span class="token number">4.022229909896851</span></code></pre><p>在上面带中我们通过async关键字定义一个协程（coroutine）,当然协程不能直接运行，需要将协程加入到事件循环loop中asyncio.get_event_loop：创建一个事件循环，然后使用run_until_complete将协程注册到事件循环，并启动事件循环。task对象是Future类的子类，保存了协程运行后的状态，用于未来获取协程的结果。<br>使用async可以定义协程对象，使用await可以针对耗时的操作进行挂起，就像生成器里的yield一样，函数让出控制权。协程遇到await，事件循环将会挂起该协程，执行别的协程，直到其他的协程也挂起或者执行完毕，再进行下一个协程的执行耗时的操作一般是一些IO操作，例如网络请求，文件读取等。我们使用asyncio.sleep函数来模拟IO操作。协程的目的也是让这些IO操作异步化。</p><h3 id="线程协程"><a href="#线程协程" class="headerlink" title="线程协程"></a>线程协程</h3><p>很多时候，我们的事件循环用于注册协程，而有的协程需要动态的添加到事件循环中。一个简单的方式就是使用多线程。当前线程创建一个事件循环，然后在新建一个线程，在新线程中启动事件循环。当前线程不会被block。</p><pre class=" language-php"><code class="language-php">import asyncioimport timefrom threading import Threadnow <span class="token operator">=</span> lambda <span class="token punctuation">:</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>def <span class="token function">start_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span><span class="token function">set_event_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span><span class="token function">run_forever</span><span class="token punctuation">(</span><span class="token punctuation">)</span>async def <span class="token function">do_some_work</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting {}'</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    await asyncio<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Done after {}s'</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>def <span class="token function">more_work</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'More work {}'</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finished more work {}'</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>new_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span><span class="token function">new_event_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t <span class="token operator">=</span> <span class="token function">Thread</span><span class="token punctuation">(</span>target<span class="token operator">=</span>start_loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>new_loop<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'TIME: {}'</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span><span class="token function">run_coroutine_threadsafe</span><span class="token punctuation">(</span><span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_loop<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span><span class="token function">run_coroutine_threadsafe</span><span class="token punctuation">(</span><span class="token function">do_some_work</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_loop<span class="token punctuation">)</span></code></pre><p>上述的例子，主线程中创建一个new_loop，然后在另外的子线程中开启一个无限事件循环。 主线程通过run_coroutine_threadsafe新注册协程对象。这样就能在子线程中进行事件循环的并发操作，同时主线程又不会被block。一共执行的时间大概在6s左右。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yield 生成器 读取超大文件</title>
      <link href="/2018/02/01/yield/"/>
      <url>/2018/02/01/yield/</url>
      
        <content type="html"><![CDATA[<p>生成器函数的核心是yield关键字。它最简单的调用形式看起来像一个return申明，不同之处在于普通return会返回值并终止函数的执行，而yield会返回一个值给循环调用此生成器的代码并且只是暂停执行生成器函数。</p><h3 id="读取超大文件"><a href="#读取超大文件" class="headerlink" title="读取超大文件"></a>读取超大文件</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">readTxt</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment"># code...</span>    <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token shell-comment comment"># code...</span>        <span class="token keyword">yield</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="形成斐波那数列"><a href="#形成斐波那数列" class="headerlink" title="形成斐波那数列"></a>形成斐波那数列</h3><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">fb</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">yield</span> <span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$n</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果用递归实现必须要cache节点数据,不然就是以指数增长的计算。</span><span class="token variable">$map</span>   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fbd</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">global</span> <span class="token variable">$map</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'aaaaaaa'</span><span class="token punctuation">.</span><span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$map</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$map</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$map</span><span class="token punctuation">[</span><span class="token variable">$n</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yield </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/01/01/hello-world/"/>
      <url>/2018/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-php"><code class="language-php">$ hexo <span class="token keyword">new</span> <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-php"><code class="language-php">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-php"><code class="language-php">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-php"><code class="language-php">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
